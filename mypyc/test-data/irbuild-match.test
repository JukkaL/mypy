[case testMatchValuePattern_python3_10]
def f():
    match 123:
        case 123:
            print("matched")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11, r12 :: object
L0:
    r0 = 246 == 246
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L1 else goto L2 :: bool
L1:
    r5 = 'matched'
    r6 = builtins :: module
    r7 = 'print'
    r8 = CPyObject_GetAttr(r6, r7)
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    keep_alive r5
    goto L3
L2:
L3:
    r12 = box(None, 1)
    return r12
[case testMatchOrPattern_python3_10]
def f():
    match 123:
        case 123 | 456:
            print("matched")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: bit
    r6 :: object
    r7 :: int32
    r8 :: bit
    r9 :: bool
    r10 :: str
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: object[1]
    r15 :: object_ptr
    r16, r17 :: object
L0:
    r0 = 246 == 246
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L3 else goto L1 :: bool
L1:
    r5 = 246 == 912
    r6 = box(bit, r5)
    r7 = PyObject_IsTrue(r6)
    r8 = r7 >= 0 :: signed
    r9 = truncate r7: int32 to builtins.bool
    if r9 goto L3 else goto L2 :: bool
L2:
    goto L4
L3:
    r10 = 'matched'
    r11 = builtins :: module
    r12 = 'print'
    r13 = CPyObject_GetAttr(r11, r12)
    r14 = [r10]
    r15 = load_address r14
    r16 = _PyObject_Vectorcall(r13, r15, 1, 0)
    keep_alive r10
    goto L5
L4:
L5:
    r17 = box(None, 1)
    return r17
[case testMatchOrPatternManyPatterns_python3_10]
def f():
    match 1:
        case 1 | 2 | 3 | 4:
            print("matched")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: bit
    r6 :: object
    r7 :: int32
    r8 :: bit
    r9 :: bool
    r10 :: bit
    r11 :: object
    r12 :: int32
    r13 :: bit
    r14 :: bool
    r15 :: bit
    r16 :: object
    r17 :: int32
    r18 :: bit
    r19 :: bool
    r20 :: str
    r21 :: object
    r22 :: str
    r23 :: object
    r24 :: object[1]
    r25 :: object_ptr
    r26, r27 :: object
L0:
    r0 = 2 == 2
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L5 else goto L1 :: bool
L1:
    r5 = 2 == 4
    r6 = box(bit, r5)
    r7 = PyObject_IsTrue(r6)
    r8 = r7 >= 0 :: signed
    r9 = truncate r7: int32 to builtins.bool
    if r9 goto L5 else goto L2 :: bool
L2:
    r10 = 2 == 6
    r11 = box(bit, r10)
    r12 = PyObject_IsTrue(r11)
    r13 = r12 >= 0 :: signed
    r14 = truncate r12: int32 to builtins.bool
    if r14 goto L5 else goto L3 :: bool
L3:
    r15 = 2 == 8
    r16 = box(bit, r15)
    r17 = PyObject_IsTrue(r16)
    r18 = r17 >= 0 :: signed
    r19 = truncate r17: int32 to builtins.bool
    if r19 goto L5 else goto L4 :: bool
L4:
    goto L6
L5:
    r20 = 'matched'
    r21 = builtins :: module
    r22 = 'print'
    r23 = CPyObject_GetAttr(r21, r22)
    r24 = [r20]
    r25 = load_address r24
    r26 = _PyObject_Vectorcall(r23, r25, 1, 0)
    keep_alive r20
    goto L7
L6:
L7:
    r27 = box(None, 1)
    return r27
[case testMatchClassPattern_python3_10]
def f():
    match 123:
        case int():
            print("matched")
[out]
def f():
    r0, r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11, r12 :: object
L0:
    r0 = load_address PyLong_Type
    r1 = object 123
    r2 = PyObject_IsInstance(r1, r0)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L1 else goto L2 :: bool
L1:
    r5 = 'matched'
    r6 = builtins :: module
    r7 = 'print'
    r8 = CPyObject_GetAttr(r6, r7)
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    keep_alive r5
    goto L3
L2:
L3:
    r12 = box(None, 1)
    return r12
[case testMatchExaustivePattern_python3_10]
def f():
    match 123:
        case _:
            print("matched")
[out]
def f():
    r0 :: str
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: object[1]
    r5 :: object_ptr
    r6, r7 :: object
L0:
L1:
    r0 = 'matched'
    r1 = builtins :: module
    r2 = 'print'
    r3 = CPyObject_GetAttr(r1, r2)
    r4 = [r0]
    r5 = load_address r4
    r6 = _PyObject_Vectorcall(r3, r5, 1, 0)
    keep_alive r0
    goto L3
L2:
L3:
    r7 = box(None, 1)
    return r7
[case testMatchMultipleBodies_python3_10]
def f():
    match 123:
        case 123:
            print("matched")
        case 456:
            print("no match")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: int32
    r15 :: bit
    r16 :: bool
    r17 :: str
    r18 :: object
    r19 :: str
    r20 :: object
    r21 :: object[1]
    r22 :: object_ptr
    r23, r24 :: object
L0:
    r0 = 246 == 246
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L1 else goto L2 :: bool
L1:
    r5 = 'matched'
    r6 = builtins :: module
    r7 = 'print'
    r8 = CPyObject_GetAttr(r6, r7)
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    keep_alive r5
    goto L5
L2:
    r12 = 246 == 912
    r13 = box(bit, r12)
    r14 = PyObject_IsTrue(r13)
    r15 = r14 >= 0 :: signed
    r16 = truncate r14: int32 to builtins.bool
    if r16 goto L3 else goto L4 :: bool
L3:
    r17 = 'no match'
    r18 = builtins :: module
    r19 = 'print'
    r20 = CPyObject_GetAttr(r18, r19)
    r21 = [r17]
    r22 = load_address r21
    r23 = _PyObject_Vectorcall(r20, r22, 1, 0)
    keep_alive r17
    goto L5
L4:
L5:
    r24 = box(None, 1)
    return r24
[case testMatchMultiBodyAndComplexOr_python3_10]
def f():
    match 123:
        case 1:
            print("here 1")
        case 2 | 3:
            print("here 2 | 3")
        case 123:
            print("here 123")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11 :: object
    r12 :: bit
    r13 :: object
    r14 :: int32
    r15 :: bit
    r16 :: bool
    r17 :: bit
    r18 :: object
    r19 :: int32
    r20 :: bit
    r21 :: bool
    r22 :: str
    r23 :: object
    r24 :: str
    r25 :: object
    r26 :: object[1]
    r27 :: object_ptr
    r28 :: object
    r29 :: bit
    r30 :: object
    r31 :: int32
    r32 :: bit
    r33 :: bool
    r34 :: str
    r35 :: object
    r36 :: str
    r37 :: object
    r38 :: object[1]
    r39 :: object_ptr
    r40, r41 :: object
L0:
    r0 = 246 == 2
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L1 else goto L2 :: bool
L1:
    r5 = 'here 1'
    r6 = builtins :: module
    r7 = 'print'
    r8 = CPyObject_GetAttr(r6, r7)
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    keep_alive r5
    goto L9
L2:
    r12 = 246 == 4
    r13 = box(bit, r12)
    r14 = PyObject_IsTrue(r13)
    r15 = r14 >= 0 :: signed
    r16 = truncate r14: int32 to builtins.bool
    if r16 goto L5 else goto L3 :: bool
L3:
    r17 = 246 == 6
    r18 = box(bit, r17)
    r19 = PyObject_IsTrue(r18)
    r20 = r19 >= 0 :: signed
    r21 = truncate r19: int32 to builtins.bool
    if r21 goto L5 else goto L4 :: bool
L4:
    goto L6
L5:
    r22 = 'here 2 | 3'
    r23 = builtins :: module
    r24 = 'print'
    r25 = CPyObject_GetAttr(r23, r24)
    r26 = [r22]
    r27 = load_address r26
    r28 = _PyObject_Vectorcall(r25, r27, 1, 0)
    keep_alive r22
    goto L9
L6:
    r29 = 246 == 246
    r30 = box(bit, r29)
    r31 = PyObject_IsTrue(r30)
    r32 = r31 >= 0 :: signed
    r33 = truncate r31: int32 to builtins.bool
    if r33 goto L7 else goto L8 :: bool
L7:
    r34 = 'here 123'
    r35 = builtins :: module
    r36 = 'print'
    r37 = CPyObject_GetAttr(r35, r36)
    r38 = [r34]
    r39 = load_address r38
    r40 = _PyObject_Vectorcall(r37, r39, 1, 0)
    keep_alive r34
    goto L9
L8:
L9:
    r41 = box(None, 1)
    return r41
[case testMatchWithGuard_python3_10]
def f():
    match 123:
        case 123 if True:
            print("matched")
[out]
def f():
    r0 :: bit
    r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11, r12 :: object
L0:
    r0 = 246 == 246
    r1 = box(bit, r0)
    r2 = PyObject_IsTrue(r1)
    r3 = r2 >= 0 :: signed
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L1 else goto L3 :: bool
L1:
    if 1 goto L2 else goto L3 :: bool
L2:
    r5 = 'matched'
    r6 = builtins :: module
    r7 = 'print'
    r8 = CPyObject_GetAttr(r6, r7)
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    keep_alive r5
    goto L4
L3:
L4:
    r12 = box(None, 1)
    return r12
[case testMatchSingleton_python3_10]
def f():
    match 123:
        case True:
            print("value is True")
        case False:
            print("value is False")
        case None:
            print("value is None")
[out]
def f():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: str
    r6 :: object
    r7 :: object[1]
    r8 :: object_ptr
    r9, r10, r11 :: object
    r12 :: bit
    r13 :: str
    r14 :: object
    r15 :: str
    r16 :: object
    r17 :: object[1]
    r18 :: object_ptr
    r19, r20, r21 :: object
    r22 :: bit
    r23 :: str
    r24 :: object
    r25 :: str
    r26 :: object
    r27 :: object[1]
    r28 :: object_ptr
    r29, r30 :: object
L0:
    r0 = object 123
    r1 = box(bool, 1)
    r2 = r0 == r1
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = 'value is True'
    r4 = builtins :: module
    r5 = 'print'
    r6 = CPyObject_GetAttr(r4, r5)
    r7 = [r3]
    r8 = load_address r7
    r9 = _PyObject_Vectorcall(r6, r8, 1, 0)
    keep_alive r3
    goto L7
L2:
    r10 = object 123
    r11 = box(bool, 0)
    r12 = r10 == r11
    if r12 goto L3 else goto L4 :: bool
L3:
    r13 = 'value is False'
    r14 = builtins :: module
    r15 = 'print'
    r16 = CPyObject_GetAttr(r14, r15)
    r17 = [r13]
    r18 = load_address r17
    r19 = _PyObject_Vectorcall(r16, r18, 1, 0)
    keep_alive r13
    goto L7
L4:
    r20 = load_address _Py_NoneStruct
    r21 = object 123
    r22 = r21 == r20
    if r22 goto L5 else goto L6 :: bool
L5:
    r23 = 'value is None'
    r24 = builtins :: module
    r25 = 'print'
    r26 = CPyObject_GetAttr(r24, r25)
    r27 = [r23]
    r28 = load_address r27
    r29 = _PyObject_Vectorcall(r26, r28, 1, 0)
    keep_alive r23
    goto L7
L6:
L7:
    r30 = box(None, 1)
    return r30
