[case testNewFrozenSet]
from typing import FrozenSet
def f() -> FrozenSet[int]:
    return frozenset({1, 2, 3})
[out]
def f():
    r0 :: set
    r1 :: object
    r2 :: i32
    r3 :: bit
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: object
    r8 :: i32
    r9 :: bit
    r10 :: frozenset
L0:
    r0 = PySet_New(0)
    r1 = object 1
    r2 = PySet_Add(r0, r1)
    r3 = r2 >= 0 :: signed
    r4 = object 2
    r5 = PySet_Add(r0, r4)
    r6 = r5 >= 0 :: signed
    r7 = object 3
    r8 = PySet_Add(r0, r7)
    r9 = r8 >= 0 :: signed
    r10 = PyFrozenSet_New(r0)
    return r10

[case testNewEmptyFrozenSet]
from typing import FrozenSet
def f1() -> FrozenSet[int]:
    return frozenset()

def f2() -> FrozenSet[int]:
    return frozenset(())
[out]
def f1():
    r0 :: frozenset
L0:
    r0 = PyFrozenSet_New(0)
    return r0
def f2():
    r0 :: tuple[]
    r1 :: object
    r2 :: frozenset
L0:
    r0 = ()
    r1 = box(tuple[], r0)
    r2 = PyFrozenSet_New(r1)
    return r2

[case testNewFrozenSetFromIterable]
from typing import FrozenSet, List, TypeVar

T = TypeVar("T")

def f(l: List[T]) -> FrozenSet[T]:
    return frozenset(l)
[out]
def f(l):
    l :: list
    r0 :: frozenset
L0:
    r0 = PyFrozenSet_New(l)
    return r0

[case testNewFrozenSetFromIterable2]
def f(x: int) -> int:
    return x

def test1() -> None:
    tmp_list = [1, 3, 5]
    a = frozenset(f(x) for x in tmp_list)

def test2() -> None:
    tmp_tuple = (1, 3, 5)
    b = frozenset(f(x) for x in tmp_tuple)

def test3() -> None:
    tmp_set = {1, 3, 5}
    c = frozenset(f(x) for x in tmp_set)

def test4() -> None:
    tmp_dict = {1: '1', 3: '3', 5: '5'}
    d = frozenset(f(x) for x in tmp_dict)

def test5() -> None:
    e = frozenset(f(x) for x in range(1, 6, 2))

def test6() -> None:
    f = frozenset((f(x) for x in range(1, 6, 2)))
[out]
def f(x):
    x :: int
L0:
    return x
def test1():
    r0 :: list
    r1, r2, r3 :: object
    r4 :: ptr
    tmp_list :: list
    r5 :: native_int
    r6 :: list
    r7 :: short_int
    r8 :: native_int
    r9 :: short_int
    r10 :: bit
    r11 :: object
    r12, x, r13 :: int
    r14 :: object
    r15 :: bit
    r16 :: short_int
    r17, a :: frozenset
L0:
    r0 = PyList_New(3)
    r1 = object 1
    r2 = object 3
    r3 = object 5
    r4 = list_items r0
    buf_init_item r4, 0, r1
    buf_init_item r4, 1, r2
    buf_init_item r4, 2, r3
    keep_alive r0
    tmp_list = r0
    r5 = var_object_size tmp_list
    r6 = PyList_New(r5)
    r7 = 0
L1:
    r8 = var_object_size tmp_list
    r9 = r8 << 1
    r10 = int_lt r7, r9
    if r10 goto L2 else goto L4 :: bool
L2:
    r11 = list_get_item_unsafe tmp_list, r7
    r12 = unbox(int, r11)
    x = r12
    r13 = f(x)
    r14 = box(int, r13)
    r15 = CPyList_SetItemUnsafe(r6, r7, r14)
L3:
    r16 = r7 + 2
    r7 = r16
    goto L1
L4:
    r17 = PyFrozenSet_New(r6)
    a = r17
    return 1
def test2():
    r0, tmp_tuple :: tuple[int, int, int]
    r1 :: list
    r2, r3, r4 :: object
    r5, x, r6 :: int
    r7 :: object
    r8 :: i32
    r9, r10 :: bit
    r11, b :: frozenset
L0:
    r0 = (2, 6, 10)
    tmp_tuple = r0
    r1 = PyList_New(0)
    r2 = box(tuple[int, int, int], tmp_tuple)
    r3 = PyObject_GetIter(r2)
L1:
    r4 = PyIter_Next(r3)
    if is_error(r4) goto L4 else goto L2
L2:
    r5 = unbox(int, r4)
    x = r5
    r6 = f(x)
    r7 = box(int, r6)
    r8 = PyList_Append(r1, r7)
    r9 = r8 >= 0 :: signed
L3:
    goto L1
L4:
    r10 = CPy_NoErrOccurred()
L5:
    r11 = PyFrozenSet_New(r1)
    b = r11
    return 1
def test3():
    r0 :: set
    r1 :: object
    r2 :: i32
    r3 :: bit
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: object
    r8 :: i32
    r9 :: bit
    tmp_set :: set
    r10 :: list
    r11, r12 :: object
    r13, x, r14 :: int
    r15 :: object
    r16 :: i32
    r17, r18 :: bit
    r19, c :: frozenset
L0:
    r0 = PySet_New(0)
    r1 = object 1
    r2 = PySet_Add(r0, r1)
    r3 = r2 >= 0 :: signed
    r4 = object 3
    r5 = PySet_Add(r0, r4)
    r6 = r5 >= 0 :: signed
    r7 = object 5
    r8 = PySet_Add(r0, r7)
    r9 = r8 >= 0 :: signed
    tmp_set = r0
    r10 = PyList_New(0)
    r11 = PyObject_GetIter(tmp_set)
L1:
    r12 = PyIter_Next(r11)
    if is_error(r12) goto L4 else goto L2
L2:
    r13 = unbox(int, r12)
    x = r13
    r14 = f(x)
    r15 = box(int, r14)
    r16 = PyList_Append(r10, r15)
    r17 = r16 >= 0 :: signed
L3:
    goto L1
L4:
    r18 = CPy_NoErrOccurred()
L5:
    r19 = PyFrozenSet_New(r10)
    c = r19
    return 1
def test4():
    r0, r1, r2 :: str
    r3, r4, r5 :: object
    r6, tmp_dict :: dict
    r7 :: list
    r8 :: short_int
    r9 :: native_int
    r10 :: short_int
    r11 :: object
    r12 :: tuple[bool, short_int, object]
    r13 :: short_int
    r14 :: bool
    r15 :: object
    r16, x, r17 :: int
    r18 :: object
    r19 :: i32
    r20, r21, r22 :: bit
    r23, d :: frozenset
L0:
    r0 = '1'
    r1 = '3'
    r2 = '5'
    r3 = object 1
    r4 = object 3
    r5 = object 5
    r6 = CPyDict_Build(3, r3, r0, r4, r1, r5, r2)
    tmp_dict = r6
    r7 = PyList_New(0)
    r8 = 0
    r9 = PyDict_Size(tmp_dict)
    r10 = r9 << 1
    r11 = CPyDict_GetKeysIter(tmp_dict)
L1:
    r12 = CPyDict_NextKey(r11, r8)
    r13 = r12[1]
    r8 = r13
    r14 = r12[0]
    if r14 goto L2 else goto L4 :: bool
L2:
    r15 = r12[2]
    r16 = unbox(int, r15)
    x = r16
    r17 = f(x)
    r18 = box(int, r17)
    r19 = PyList_Append(r7, r18)
    r20 = r19 >= 0 :: signed
L3:
    r21 = CPyDict_CheckSize(tmp_dict, r10)
    goto L1
L4:
    r22 = CPy_NoErrOccurred()
L5:
    r23 = PyFrozenSet_New(r7)
    d = r23
    return 1
def test5():
    r0 :: list
    r1 :: short_int
    x :: int
    r2 :: bit
    r3 :: int
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: short_int
    r8, e :: frozenset
L0:
    r0 = PyList_New(0)
    r1 = 2
    x = r1
L1:
    r2 = int_lt r1, 12
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = f(x)
    r4 = box(int, r3)
    r5 = PyList_Append(r0, r4)
    r6 = r5 >= 0 :: signed
L3:
    r7 = r1 + 4
    r1 = r7
    x = r7
    goto L1
L4:
    r8 = PyFrozenSet_New(r0)
    e = r8
    return 1
def test6():
    r0 :: list
    r1 :: short_int
    x :: int
    r2 :: bit
    r3 :: int
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: short_int
    r8, f :: frozenset
L0:
    r0 = PyList_New(0)
    r1 = 2
    x = r1
L1:
    r2 = int_lt r1, 12
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = f(x)
    r4 = box(int, r3)
    r5 = PyList_Append(r0, r4)
    r6 = r5 >= 0 :: signed
L3:
    r7 = r1 + 4
    r1 = r7
    x = r7
    goto L1
L4:
    r8 = PyFrozenSet_New(r0)
    f = r8
    return 1

[case testNewFrozenSetFromIterable3]
def f1(x: int) -> int:
    return x

def f2(x: int) -> int:
    return x * 10

def f3(x: int) -> int:
    return x + 1

def test() -> None:
    tmp_list = [1, 2, 3, 4, 5]
    a = frozenset(f3(x) for x in (f2(y) for y in (f1(z) for z in tmp_list if z < 4)))
[out]
def f1(x):
    x :: int
L0:
    return x
def f2(x):
    x, r0 :: int
L0:
    r0 = CPyTagged_Multiply(x, 20)
    return r0
def f3(x):
    x, r0 :: int
L0:
    r0 = CPyTagged_Add(x, 2)
    return r0
def test():
    r0 :: list
    r1, r2, r3, r4, r5 :: object
    r6 :: ptr
    tmp_list, r7, r8, r9 :: list
    r10 :: short_int
    r11 :: native_int
    r12 :: short_int
    r13 :: bit
    r14 :: object
    r15, z :: int
    r16 :: bit
    r17 :: int
    r18 :: object
    r19 :: i32
    r20 :: bit
    r21 :: short_int
    r22, r23, r24 :: object
    r25, y, r26 :: int
    r27 :: object
    r28 :: i32
    r29, r30 :: bit
    r31, r32, r33 :: object
    r34, x, r35 :: int
    r36 :: object
    r37 :: i32
    r38, r39 :: bit
    r40, a :: frozenset
L0:
    r0 = PyList_New(5)
    r1 = object 1
    r2 = object 2
    r3 = object 3
    r4 = object 4
    r5 = object 5
    r6 = list_items r0
    buf_init_item r6, 0, r1
    buf_init_item r6, 1, r2
    buf_init_item r6, 2, r3
    buf_init_item r6, 3, r4
    buf_init_item r6, 4, r5
    keep_alive r0
    tmp_list = r0
    r7 = PyList_New(0)
    r8 = PyList_New(0)
    r9 = PyList_New(0)
    r10 = 0
L1:
    r11 = var_object_size tmp_list
    r12 = r11 << 1
    r13 = int_lt r10, r12
    if r13 goto L2 else goto L6 :: bool
L2:
    r14 = list_get_item_unsafe tmp_list, r10
    r15 = unbox(int, r14)
    z = r15
    r16 = int_lt z, 8
    if r16 goto L4 else goto L3 :: bool
L3:
    goto L5
L4:
    r17 = f1(z)
    r18 = box(int, r17)
    r19 = PyList_Append(r9, r18)
    r20 = r19 >= 0 :: signed
L5:
    r21 = r10 + 2
    r10 = r21
    goto L1
L6:
    r22 = PyObject_GetIter(r9)
    r23 = PyObject_GetIter(r22)
L7:
    r24 = PyIter_Next(r23)
    if is_error(r24) goto L10 else goto L8
L8:
    r25 = unbox(int, r24)
    y = r25
    r26 = f2(y)
    r27 = box(int, r26)
    r28 = PyList_Append(r8, r27)
    r29 = r28 >= 0 :: signed
L9:
    goto L7
L10:
    r30 = CPy_NoErrOccurred()
L11:
    r31 = PyObject_GetIter(r8)
    r32 = PyObject_GetIter(r31)
L12:
    r33 = PyIter_Next(r32)
    if is_error(r33) goto L15 else goto L13
L13:
    r34 = unbox(int, r33)
    x = r34
    r35 = f3(x)
    r36 = box(int, r35)
    r37 = PyList_Append(r7, r36)
    r38 = r37 >= 0 :: signed
L14:
    goto L12
L15:
    r39 = CPy_NoErrOccurred()
L16:
    r40 = PyFrozenSet_New(r7)
    a = r40
    return 1

[case testFrozenSetSize]
from typing import FrozenSet
def f() -> int:
    return len(frozenset((1, 2, 3)))
[out]
def f():
    r0 :: tuple[int, int, int]
    r1 :: object
    r2 :: frozenset
    r3 :: ptr
    r4 :: native_int
    r5 :: short_int
L0:
    r0 = (2, 4, 6)
    r1 = box(tuple[int, int, int], r0)
    r2 = PyFrozenSet_New(r1)
    r3 = get_element_ptr r2 used :: PySetObject
    r4 = load_mem r3 :: native_int*
    keep_alive r2
    r5 = r4 << 1
    return r5

[case testFrozenSetContains]
from typing import FrozenSet
def f() -> bool:
    x = frozenset((3, 4))
    return (5 in x)
[out]
def f():
    r0 :: tuple[int, int]
    r1 :: object
    r2, x :: frozenset
    r3 :: object
    r4 :: i32
    r5 :: bit
    r6 :: bool
L0:
    r0 = (6, 8)
    r1 = box(tuple[int, int], r0)
    r2 = PyFrozenSet_New(r1)
    x = r2
    r3 = object 5
    r4 = PySet_Contains(x, r3)
    r5 = r4 >= 0 :: signed
    r6 = truncate r4: i32 to builtins.bool
    return r6
