[case testGetAttribute]
class A:
    x: int

def f(a: A) -> int:
    return a.x
[out]
def f(a):
    a :: __main__.A
    r0 :: int
L0:
    r0 = a.x
    return r0

[case testSetAttribute]
class A:
    x: int

def f(a: A) -> None:
    a.x = 1
[out]
def f(a):
    a :: __main__.A
    r0 :: bool
L0:
    a.x = 2; r0 = is_error
    return 1

[case testUserClassInList]
class C:
    x: int

def f() -> int:
    c = C()
    c.x = 5
    a = [c]
    d = a[0]
    return d.x + 1
[out]
def f():
    r0, c :: __main__.C
    r1 :: bool
    r2 :: list
    r3, r4 :: ptr
    a :: list
    r5 :: object
    r6, d :: __main__.C
    r7, r8 :: int
L0:
    r0 = C()
    c = r0
    c.x = 10; r1 = is_error
    r2 = PyList_New(1)
    r3 = get_element_ptr r2 ob_item :: PyListObject
    r4 = load_mem r3 :: ptr*
    set_mem r4, c :: builtins.object*
    keep_alive r2
    a = r2
    r5 = CPyList_GetItemShort(a, 0)
    r6 = cast(__main__.C, r5)
    d = r6
    r7 = d.x
    r8 = CPyTagged_Add(r7, 2)
    return r8

[case testMethodCall]
class A:
    def f(self, x: int, y: str) -> int:
        return x + 10

def g(a: A) -> None:
    a.f(1, 'hi')
[out]
def A.f(self, x, y):
    self :: __main__.A
    x :: int
    y :: str
    r0 :: int
L0:
    r0 = CPyTagged_Add(x, 20)
    return r0
def g(a):
    a :: __main__.A
    r0 :: str
    r1 :: int
L0:
    r0 = 'hi'
    r1 = a.f(2, r0)
    return 1

[case testForwardUse]
def g(a: A) -> int:
    return a.n

class A:
    n : int

[out]
def g(a):
    a :: __main__.A
    r0 :: int
L0:
    r0 = a.n
    return r0

[case testOptionalMember]
from typing import Optional
class Node:
    next: Optional[Node]
    def length(self) -> int:
        if self.next is not None:
            return 1 + self.next.length()
        return 1
[out]
def Node.length(self):
    self :: __main__.Node
    r0 :: union[__main__.Node, None]
    r1 :: object
    r2, r3 :: bit
    r4 :: union[__main__.Node, None]
    r5 :: __main__.Node
    r6, r7 :: int
L0:
    r0 = self.next
    r1 = box(None, 1)
    r2 = r0 == r1
    r3 = r2 ^ 1
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = self.next
    r5 = cast(__main__.Node, r4)
    r6 = r5.length()
    r7 = CPyTagged_Add(2, r6)
    return r7
L2:
    return 2

[case testSubclass]
class A:
    def __init__(self) -> None:
        self.x = 10
class B(A):
    def __init__(self) -> None:
        self.x = 20
        self.y = 30
[out]
def A.__init__(self):
    self :: __main__.A
    r0 :: bool
L0:
    self.x = 20; r0 = is_error
    return 1
def B.__init__(self):
    self :: __main__.B
    r0, r1 :: bool
L0:
    self.x = 40; r0 = is_error
    self.y = 60; r1 = is_error
    return 1

[case testAttrLvalue]
class O(object):
    def __init__(self) -> None:
        self.x = 1

def increment(o: O) -> O:
    o.x += 1
    return o
[out]
def O.__init__(self):
    self :: __main__.O
    r0 :: bool
L0:
    self.x = 2; r0 = is_error
    return 1
def increment(o):
    o :: __main__.O
    r0, r1 :: int
    r2 :: bool
L0:
    r0 = o.x
    r1 = CPyTagged_Add(r0, 2)
    o.x = r1; r2 = is_error
    return o

[case testSubclassSpecialize2]
class A:
    def foo(self, x: int) -> object:
        return str(x)
class B(A):
    def foo(self, x: object) -> object:
        return x
class C(B):
    def foo(self, x: object) -> int:
        return id(x)

def use_a(x: A, y: int) -> object:
    return x.foo(y)

def use_b(x: B, y: object) -> object:
    return x.foo(y)

def use_c(x: C, y: object) -> int:
    return x.foo(y)
[out]
def A.foo(self, x):
    self :: __main__.A
    x :: int
    r0 :: str
L0:
    r0 = CPyTagged_Str(x)
    return r0
def B.foo(self, x):
    self :: __main__.B
    x :: object
L0:
    return x
def B.foo__A_glue(self, x):
    self :: __main__.B
    x :: int
    r0, r1 :: object
L0:
    r0 = box(int, x)
    r1 = B.foo(self, r0)
    return r1
def C.foo(self, x):
    self :: __main__.C
    x :: object
    r0 :: int
L0:
    r0 = CPyTagged_Id(x)
    return r0
def C.foo__B_glue(self, x):
    self :: __main__.C
    x :: object
    r0 :: int
    r1 :: object
L0:
    r0 = C.foo(self, x)
    r1 = box(int, r0)
    return r1
def C.foo__A_glue(self, x):
    self :: __main__.C
    x :: int
    r0 :: object
    r1 :: int
    r2 :: object
L0:
    r0 = box(int, x)
    r1 = C.foo(self, r0)
    r2 = box(int, r1)
    return r2
def use_a(x, y):
    x :: __main__.A
    y :: int
    r0 :: object
L0:
    r0 = x.foo(y)
    return r0
def use_b(x, y):
    x :: __main__.B
    y, r0 :: object
L0:
    r0 = x.foo(y)
    return r0
def use_c(x, y):
    x :: __main__.C
    y :: object
    r0 :: int
L0:
    r0 = x.foo(y)
    return r0

[case testSubclass_toplevel]
from typing import TypeVar, Generic
from mypy_extensions import trait
T = TypeVar('T')
class C:
    pass

@trait
class S:
    pass

class D(C, S, Generic[T]):
    pass

[out]
def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5, r6 :: object
    r7 :: bit
    r8, r9 :: dict
    r10, r11 :: str
    r12 :: list
    r13, r14, r15 :: ptr
    r16 :: str
    r17, r18 :: object
    r19 :: dict
    r20 :: str
    r21 :: object
    r22 :: str
    r23 :: int32
    r24 :: bit
    r25 :: str
    r26 :: object
    r27 :: str
    r28 :: int32
    r29 :: bit
    r30, r31 :: object
    r32 :: bit
    r33, r34 :: dict
    r35 :: str
    r36 :: list
    r37, r38 :: ptr
    r39 :: str
    r40, r41 :: object
    r42 :: dict
    r43 :: str
    r44 :: object
    r45 :: str
    r46 :: int32
    r47 :: bit
    r48 :: str
    r49 :: dict
    r50 :: str
    r51, r52 :: object
    r53 :: dict
    r54 :: str
    r55 :: int32
    r56 :: bit
    r57 :: object
    r58 :: str
    r59, r60 :: object
    r61 :: bool
    r62 :: str
    r63 :: tuple
    r64 :: int32
    r65 :: bit
    r66 :: dict
    r67 :: str
    r68 :: int32
    r69 :: bit
    r70 :: object
    r71 :: str
    r72, r73 :: object
    r74 :: str
    r75 :: tuple
    r76 :: int32
    r77 :: bit
    r78 :: dict
    r79 :: str
    r80 :: int32
    r81 :: bit
    r82, r83 :: object
    r84 :: dict
    r85 :: str
    r86 :: object
    r87 :: dict
    r88 :: str
    r89, r90 :: object
    r91 :: tuple
    r92 :: str
    r93, r94 :: object
    r95 :: bool
    r96, r97 :: str
    r98 :: tuple
    r99 :: int32
    r100 :: bit
    r101 :: dict
    r102 :: str
    r103 :: int32
    r104 :: bit
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L2 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    builtins = r4 :: module
L2:
    r5 = typing :: module
    r6 = load_address _Py_NoneStruct
    r7 = r5 != r6
    if r7 goto L4 else goto L3 :: bool
L3:
    r8 = __main__.globals :: static
    r9 = PyEval_GetLocals()
    r10 = 'TypeVar'
    r11 = 'Generic'
    r12 = PyList_New(2)
    r13 = get_element_ptr r12 ob_item :: PyListObject
    r14 = load_mem r13 :: ptr*
    set_mem r14, r10 :: builtins.object*
    r15 = r14 + 8
    set_mem r15, r11 :: builtins.object*
    keep_alive r12
    r16 = 'typing'
    r17 = PyImport_ImportModuleLevelObject(r16, r8, r9, r12, 0)
    typing = r17 :: module
L4:
    r18 = typing :: module
    r19 = __main__.globals :: static
    r20 = 'TypeVar'
    r21 = CPyObject_GetAttr(r18, r20)
    r22 = 'TypeVar'
    r23 = CPyDict_SetItem(r19, r22, r21)
    r24 = r23 >= 0 :: signed
    r25 = 'Generic'
    r26 = CPyObject_GetAttr(r18, r25)
    r27 = 'Generic'
    r28 = CPyDict_SetItem(r19, r27, r26)
    r29 = r28 >= 0 :: signed
    r30 = mypy_extensions :: module
    r31 = load_address _Py_NoneStruct
    r32 = r30 != r31
    if r32 goto L6 else goto L5 :: bool
L5:
    r33 = __main__.globals :: static
    r34 = PyEval_GetLocals()
    r35 = 'trait'
    r36 = PyList_New(1)
    r37 = get_element_ptr r36 ob_item :: PyListObject
    r38 = load_mem r37 :: ptr*
    set_mem r38, r35 :: builtins.object*
    keep_alive r36
    r39 = 'mypy_extensions'
    r40 = PyImport_ImportModuleLevelObject(r39, r33, r34, r36, 0)
    mypy_extensions = r40 :: module
L6:
    r41 = mypy_extensions :: module
    r42 = __main__.globals :: static
    r43 = 'trait'
    r44 = CPyObject_GetAttr(r41, r43)
    r45 = 'trait'
    r46 = CPyDict_SetItem(r42, r45, r44)
    r47 = r46 >= 0 :: signed
    r48 = 'T'
    r49 = __main__.globals :: static
    r50 = 'TypeVar'
    r51 = CPyDict_GetItem(r49, r50)
    r52 = PyObject_CallFunctionObjArgs(r51, r48, 0)
    r53 = __main__.globals :: static
    r54 = 'T'
    r55 = CPyDict_SetItem(r53, r54, r52)
    r56 = r55 >= 0 :: signed
    r57 = <error> :: object
    r58 = '__main__'
    r59 = __main__.C_template :: type
    r60 = CPyType_FromTemplate(r59, r57, r58)
    r61 = C_trait_vtable_setup()
    r62 = '__mypyc_attrs__'
    r63 = PyTuple_Pack(0)
    r64 = PyObject_SetAttr(r60, r62, r63)
    r65 = r64 >= 0 :: signed
    __main__.C = r60 :: type
    r66 = __main__.globals :: static
    r67 = 'C'
    r68 = CPyDict_SetItem(r66, r67, r60)
    r69 = r68 >= 0 :: signed
    r70 = <error> :: object
    r71 = '__main__'
    r72 = __main__.S_template :: type
    r73 = CPyType_FromTemplate(r72, r70, r71)
    r74 = '__mypyc_attrs__'
    r75 = PyTuple_Pack(0)
    r76 = PyObject_SetAttr(r73, r74, r75)
    r77 = r76 >= 0 :: signed
    __main__.S = r73 :: type
    r78 = __main__.globals :: static
    r79 = 'S'
    r80 = CPyDict_SetItem(r78, r79, r73)
    r81 = r80 >= 0 :: signed
    r82 = __main__.C :: type
    r83 = __main__.S :: type
    r84 = __main__.globals :: static
    r85 = 'Generic'
    r86 = CPyDict_GetItem(r84, r85)
    r87 = __main__.globals :: static
    r88 = 'T'
    r89 = CPyDict_GetItem(r87, r88)
    r90 = PyObject_GetItem(r86, r89)
    r91 = PyTuple_Pack(3, r82, r83, r90)
    r92 = '__main__'
    r93 = __main__.D_template :: type
    r94 = CPyType_FromTemplate(r93, r91, r92)
    r95 = D_trait_vtable_setup()
    r96 = '__mypyc_attrs__'
    r97 = '__dict__'
    r98 = PyTuple_Pack(1, r97)
    r99 = PyObject_SetAttr(r94, r96, r98)
    r100 = r99 >= 0 :: signed
    __main__.D = r94 :: type
    r101 = __main__.globals :: static
    r102 = 'D'
    r103 = CPyDict_SetItem(r101, r102, r94)
    r104 = r103 >= 0 :: signed
    return 1

[case testIsInstance]
class A: pass
class B(A): pass

def f(x: A) -> B:
    if isinstance(x, B):
        return x
    return B()
[out]
def f(x):
    x :: __main__.A
    r0 :: object
    r1 :: ptr
    r2 :: object
    r3 :: bit
    r4, r5 :: __main__.B
L0:
    r0 = __main__.B :: type
    r1 = get_element_ptr x ob_type :: PyObject
    r2 = load_mem r1 :: builtins.object*
    keep_alive x
    r3 = r2 == r0
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = cast(__main__.B, x)
    return r4
L2:
    r5 = B()
    return r5

[case testIsInstanceTuple]
from typing import Union
class R: pass
class A(R): pass
class B(R): pass
class C(R): pass

def f(x: R) -> Union[A, B]:
    if isinstance(x, (A, B)):
        return x
    return A()
[out]
def f(x):
    x :: __main__.R
    r0 :: object
    r1 :: ptr
    r2 :: object
    r3 :: bit
    r4 :: bool
    r5 :: object
    r6 :: ptr
    r7 :: object
    r8 :: bit
    r9 :: union[__main__.A, __main__.B]
    r10 :: __main__.A
L0:
    r0 = __main__.A :: type
    r1 = get_element_ptr x ob_type :: PyObject
    r2 = load_mem r1 :: builtins.object*
    keep_alive x
    r3 = r2 == r0
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = r3
    goto L3
L2:
    r5 = __main__.B :: type
    r6 = get_element_ptr x ob_type :: PyObject
    r7 = load_mem r6 :: builtins.object*
    keep_alive x
    r8 = r7 == r5
    r4 = r8
L3:
    if r4 goto L4 else goto L5 :: bool
L4:
    r9 = cast(union[__main__.A, __main__.B], x)
    return r9
L5:
    r10 = A()
    return r10

[case testIsInstanceFewSubclasses]
class R: pass
class A(R): pass

def f(x: object) -> R:
    if isinstance(x, R):
        return x
    return A()
[out]
def f(x):
    x, r0 :: object
    r1 :: ptr
    r2 :: object
    r3 :: bit
    r4 :: bool
    r5 :: object
    r6 :: ptr
    r7 :: object
    r8 :: bit
    r9 :: __main__.R
    r10 :: __main__.A
L0:
    r0 = __main__.A :: type
    r1 = get_element_ptr x ob_type :: PyObject
    r2 = load_mem r1 :: builtins.object*
    keep_alive x
    r3 = r2 == r0
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = r3
    goto L3
L2:
    r5 = __main__.R :: type
    r6 = get_element_ptr x ob_type :: PyObject
    r7 = load_mem r6 :: builtins.object*
    keep_alive x
    r8 = r7 == r5
    r4 = r8
L3:
    if r4 goto L4 else goto L5 :: bool
L4:
    r9 = cast(__main__.R, x)
    return r9
L5:
    r10 = A()
    return r10

[case testIsInstanceFewSubclassesTrait]
from mypy_extensions import trait
class B: pass
@trait
class R: pass
class A(B, R): pass
class C(B, R): pass

def f(x: object) -> R:
    if isinstance(x, R):
        return x
    return A()
[out]
def f(x):
    x, r0 :: object
    r1 :: ptr
    r2 :: object
    r3 :: bit
    r4 :: bool
    r5 :: object
    r6 :: ptr
    r7 :: object
    r8 :: bit
    r9 :: __main__.R
    r10 :: __main__.A
L0:
    r0 = __main__.A :: type
    r1 = get_element_ptr x ob_type :: PyObject
    r2 = load_mem r1 :: builtins.object*
    keep_alive x
    r3 = r2 == r0
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = r3
    goto L3
L2:
    r5 = __main__.C :: type
    r6 = get_element_ptr x ob_type :: PyObject
    r7 = load_mem r6 :: builtins.object*
    keep_alive x
    r8 = r7 == r5
    r4 = r8
L3:
    if r4 goto L4 else goto L5 :: bool
L4:
    r9 = cast(__main__.R, x)
    return r9
L5:
    r10 = A()
    return r10

[case testIsInstanceManySubclasses]
class R: pass
class A(R): pass
class B(R): pass
class C(R): pass

def f(x: object) -> R:
    if isinstance(x, R):
        return x
    return B()
[out]
def f(x):
    x, r0 :: object
    r1 :: bool
    r2 :: __main__.R
    r3 :: __main__.B
L0:
    r0 = __main__.R :: type
    r1 = CPy_TypeCheck(x, r0)
    if r1 goto L1 else goto L2 :: bool
L1:
    r2 = cast(__main__.R, x)
    return r2
L2:
    r3 = B()
    return r3

[case testFakeSuper]
class A:
    def __init__(self, x: int) -> None:
        self.x = x
class B(A):
    def __init__(self, x: int, y: int) -> None:
        A.__init__(self, x)
        self.y = y
[out]
def A.__init__(self, x):
    self :: __main__.A
    x :: int
    r0 :: bool
L0:
    self.x = x; r0 = is_error
    return 1
def B.__init__(self, x, y):
    self :: __main__.B
    x, y :: int
    r0 :: None
    r1 :: bool
L0:
    r0 = A.__init__(self, x)
    self.y = y; r1 = is_error
    return 1

[case testClassMethod]
class C:
    @staticmethod
    def foo(x: int) -> int: return 10 + x
    @classmethod
    def bar(cls, x: int) -> int: return 10 + x

def lol() -> int:
    return C.foo(1) + C.bar(2)
[out]
def C.foo(x):
    x, r0 :: int
L0:
    r0 = CPyTagged_Add(20, x)
    return r0
def C.bar(cls, x):
    cls :: object
    x, r0 :: int
L0:
    r0 = CPyTagged_Add(20, x)
    return r0
def lol():
    r0 :: int
    r1 :: object
    r2, r3 :: int
L0:
    r0 = C.foo(2)
    r1 = __main__.C :: type
    r2 = C.bar(r1, 4)
    r3 = CPyTagged_Add(r0, r2)
    return r3

[case testSuper1]
class A:
    def __init__(self, x: int) -> None:
        self.x = x
class B(A):
    def __init__(self, x: int, y: int) -> None:
        super().__init__(x)
        self.y = y
[out]
def A.__init__(self, x):
    self :: __main__.A
    x :: int
    r0 :: bool
L0:
    self.x = x; r0 = is_error
    return 1
def B.__init__(self, x, y):
    self :: __main__.B
    x, y :: int
    r0 :: None
    r1 :: bool
L0:
    r0 = A.__init__(self, x)
    self.y = y; r1 = is_error
    return 1

[case testSuper2]
from mypy_extensions import trait
@trait
class T:
    def foo(self) -> None: pass

class X(T):
    def foo(self) -> None:
        super().foo()
[out]
def T.foo(self):
    self :: __main__.T
L0:
    return 1
def X.foo(self):
    self :: __main__.X
    r0 :: None
L0:
    r0 = T.foo(self)
    return 1

[case testClassVariable]
from typing import ClassVar
class A:
    x = 10  # type: ClassVar[int]

def f() -> int:
    return A.x
[out]
def f():
    r0 :: object
    r1 :: str
    r2 :: object
    r3 :: int
L0:
    r0 = __main__.A :: type
    r1 = 'x'
    r2 = CPyObject_GetAttr(r0, r1)
    r3 = unbox(int, r2)
    return r3

[case testNoEqDefined]
class A:
    pass

def f(a: A, b: A) -> bool:
    return a == b

def f2(a: A, b: A) -> bool:
    return a != b

[out]
def f(a, b):
    a, b :: __main__.A
    r0 :: bit
L0:
    r0 = a == b
    return r0
def f2(a, b):
    a, b :: __main__.A
    r0 :: bit
L0:
    r0 = a != b
    return r0

[case testEqDefined]
class Base:
    def __eq__(self, other: object) -> bool:
        return False
class Derived(Base):
    def __eq__(self, other: object) -> bool:
        return True

def f(a: Base, b: Base) -> bool:
    return a == b

def f2(a: Base, b: Base) -> bool:
    return a != b

def fOpt(a: Derived, b: Derived) -> bool:
    return a == b

def fOpt2(a: Derived, b: Derived) -> bool:
    return a != b

[out]
def Base.__eq__(self, other):
    self :: __main__.Base
    other, r0 :: object
L0:
    r0 = box(bool, 0)
    return r0
def Base.__ne__(__mypyc_self__, rhs):
    __mypyc_self__ :: __main__.Base
    rhs, r0, r1 :: object
    r2 :: bit
    r3 :: int32
    r4 :: bit
    r5 :: bool
    r6 :: object
L0:
    r0 = __mypyc_self__.__eq__(rhs)
    r1 = load_address _Py_NotImplementedStruct
    r2 = r0 == r1
    if r2 goto L2 else goto L1 :: bool
L1:
    r3 = PyObject_Not(r0)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = box(bool, r5)
    return r6
L2:
    return r1
def Derived.__eq__(self, other):
    self :: __main__.Derived
    other, r0 :: object
L0:
    r0 = box(bool, 1)
    return r0
def f(a, b):
    a, b :: __main__.Base
    r0 :: object
    r1 :: bool
L0:
    r0 = PyObject_RichCompare(a, b, 2)
    r1 = unbox(bool, r0)
    return r1
def f2(a, b):
    a, b :: __main__.Base
    r0 :: object
    r1 :: bool
L0:
    r0 = PyObject_RichCompare(a, b, 3)
    r1 = unbox(bool, r0)
    return r1
def fOpt(a, b):
    a, b :: __main__.Derived
    r0 :: object
    r1 :: bool
L0:
    r0 = a.__eq__(b)
    r1 = unbox(bool, r0)
    return r1
def fOpt2(a, b):
    a, b :: __main__.Derived
    r0 :: object
    r1 :: bool
L0:
    r0 = a.__ne__(b)
    r1 = unbox(bool, r0)
    return r1

[case testEqDefinedLater]
def f(a: 'Base', b: 'Base') -> bool:
    return a == b

def f2(a: 'Base', b: 'Base') -> bool:
    return a != b

def fOpt(a: 'Derived', b: 'Derived') -> bool:
    return a == b

def fOpt2(a: 'Derived', b: 'Derived') -> bool:
    return a != b

class Base:
    pass
class Derived(Base):
    def __eq__(self, other: object) -> bool:
        return True

[out]
def f(a, b):
    a, b :: __main__.Base
    r0 :: object
    r1 :: bool
L0:
    r0 = PyObject_RichCompare(a, b, 2)
    r1 = unbox(bool, r0)
    return r1
def f2(a, b):
    a, b :: __main__.Base
    r0 :: object
    r1 :: bool
L0:
    r0 = PyObject_RichCompare(a, b, 3)
    r1 = unbox(bool, r0)
    return r1
def fOpt(a, b):
    a, b :: __main__.Derived
    r0 :: object
    r1 :: bool
L0:
    r0 = a.__eq__(b)
    r1 = unbox(bool, r0)
    return r1
def fOpt2(a, b):
    a, b :: __main__.Derived
    r0 :: str
    r1 :: object
    r2 :: bool
L0:
    r0 = '__ne__'
    r1 = CPyObject_CallMethodObjArgs(a, r0, b, 0)
    r2 = unbox(bool, r1)
    return r2
def Derived.__eq__(self, other):
    self :: __main__.Derived
    other, r0 :: object
L0:
    r0 = box(bool, 1)
    return r0
def Derived.__ne__(__mypyc_self__, rhs):
    __mypyc_self__ :: __main__.Derived
    rhs, r0, r1 :: object
    r2 :: bit
    r3 :: int32
    r4 :: bit
    r5 :: bool
    r6 :: object
L0:
    r0 = __mypyc_self__.__eq__(rhs)
    r1 = load_address _Py_NotImplementedStruct
    r2 = r0 == r1
    if r2 goto L2 else goto L1 :: bool
L1:
    r3 = PyObject_Not(r0)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = box(bool, r5)
    return r6
L2:
    return r1

[case testDefaultVars]
from typing import ClassVar, Optional
class A:
    x = 10
    def lol(self) -> None:
        self.x = 100

LOL = 'lol'
class B(A):
    y = LOL
    z: Optional[str] = None
    b = True
    bogus = None  # type: int
[out]
def A.lol(self):
    self :: __main__.A
    r0 :: bool
L0:
    self.x = 200; r0 = is_error
    return 1
def A.__mypyc_defaults_setup(__mypyc_self__):
    __mypyc_self__ :: __main__.A
    r0 :: bool
L0:
    __mypyc_self__.x = 20; r0 = is_error
    return 1
def B.__mypyc_defaults_setup(__mypyc_self__):
    __mypyc_self__ :: __main__.B
    r0 :: bool
    r1 :: dict
    r2 :: str
    r3 :: object
    r4 :: str
    r5 :: bool
    r6 :: object
    r7, r8 :: bool
L0:
    __mypyc_self__.x = 20; r0 = is_error
    r1 = __main__.globals :: static
    r2 = 'LOL'
    r3 = CPyDict_GetItem(r1, r2)
    r4 = cast(str, r3)
    __mypyc_self__.y = r4; r5 = is_error
    r6 = box(None, 1)
    __mypyc_self__.z = r6; r7 = is_error
    __mypyc_self__.b = 1; r8 = is_error
    return 1

[case testSubclassDictSpecalized]
from typing import Dict
class WelpDict(Dict[str, int]):
    pass
def foo(x: WelpDict) -> None:
    # we care that the specalized op gets used
    x.update(x)
[out]
def foo(x):
    x :: dict
    r0 :: int32
    r1 :: bit
L0:
    r0 = CPyDict_Update(x, x)
    r1 = r0 >= 0 :: signed
    return 1

[case testNoSpuriousLinearity]
# Make sure that the non-trait MRO linearity check isn't affected by processing order
class A(B): pass
class B(C): pass
class C: pass
[out]
