-- Test cases for data flow analysis.

[case testSimple_MaybeDefined]
def f(a: int) -> None:
    x = 1
    if x == a:
        y = 1
    else:
        z = 1
[out]
def f(a):
    a :: int
    r0 :: short_int
    x :: int
    r1 :: bool
    r2, r3, r4 :: native_int
    r5, r6, r7 :: bool
    r8 :: short_int
    y :: int
    r9 :: short_int
    z :: int
    r10 :: None
L0:
    r0 = 2
    x = r0
    r2 = 1
    r3 = x & r2
    r4 = 0
    r5 = r3 == r4
    if r5 goto L1 else goto L2 :: bool
L1:
    r6 = x == a
    r1 = r6
    goto L3
L2:
    r7 = CPyTagged_IsEq_(x, a)
    r1 = r7
L3:
    if r1 goto L4 else goto L5 :: bool
L4:
    r8 = 2
    y = r8
    goto L6
L5:
    r9 = 2
    z = r9
L6:
    r10 = None
    return r10
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a, x}
(0, 2)   {a, x}                  {a, x}
(0, 3)   {a, x}                  {a, x}
(0, 4)   {a, x}                  {a, x}
(0, 5)   {a, x}                  {a, x}
(0, 6)   {a, x}                  {a, x}
(1, 0)   {a, x}                  {a, x}
(1, 1)   {a, x}                  {a, r1, x}
(1, 2)   {a, r1, x}              {a, r1, x}
(2, 0)   {a, x}                  {a, x}
(2, 1)   {a, x}                  {a, r1, x}
(2, 2)   {a, r1, x}              {a, r1, x}
(3, 0)   {a, r1, x}              {a, r1, x}
(4, 0)   {a, r1, x}              {a, r1, x}
(4, 1)   {a, r1, x}              {a, r1, x, y}
(4, 2)   {a, r1, x, y}           {a, r1, x, y}
(5, 0)   {a, r1, x}              {a, r1, x}
(5, 1)   {a, r1, x}              {a, r1, x, z}
(5, 2)   {a, r1, x, z}           {a, r1, x, z}
(6, 0)   {a, r1, x, y, z}        {a, r1, x, y, z}
(6, 1)   {a, r1, x, y, z}        {a, r1, x, y, z}

[case testSimple_Liveness]
def f(a: int) -> int:
    x = 1
    if x == 1:
        return a
    else:
        return x
[out]
def f(a):
    a :: int
    r0 :: short_int
    x :: int
    r1 :: short_int
    r2 :: bool
    r3, r4, r5 :: native_int
    r6, r7, r8 :: bool
L0:
    r0 = 2
    x = r0
    r1 = 2
    r3 = 1
    r4 = x & r3
    r5 = 0
    r6 = r4 == r5
    if r6 goto L1 else goto L2 :: bool
L1:
    r7 = x == r1
    r2 = r7
    goto L3
L2:
    r8 = CPyTagged_IsEq_(x, r1)
    r2 = r8
L3:
    if r2 goto L4 else goto L5 :: bool
L4:
    return a
L5:
    return x
L6:
    unreachable
(0, 0)   {a}                     {a, r0}
(0, 1)   {a, r0}                 {a, x}
(0, 2)   {a, x}                  {a, r1, x}
(0, 3)   {a, r1, x}              {a, r1, r3, x}
(0, 4)   {a, r1, r3, x}          {a, r1, r4, x}
(0, 5)   {a, r1, r4, x}          {a, r1, r4, r5, x}
(0, 6)   {a, r1, r4, r5, x}      {a, r1, r6, x}
(0, 7)   {a, r1, r6, x}          {a, r1, x}
(1, 0)   {a, r1, x}              {a, r7, x}
(1, 1)   {a, r7, x}              {a, r2, x}
(1, 2)   {a, r2, x}              {a, r2, x}
(2, 0)   {a, r1, x}              {a, r8, x}
(2, 1)   {a, r8, x}              {a, r2, x}
(2, 2)   {a, r2, x}              {a, r2, x}
(3, 0)   {a, r2, x}              {a, x}
(4, 0)   {a}                     {}
(5, 0)   {x}                     {}
(6, 0)   {}                      {}

[case testSpecial_Liveness]
def f() -> int:
    x = 1
    y = 1
    x = 2
    return x
[out]
def f():
    r0 :: short_int
    x :: int
    r1 :: short_int
    y :: int
    r2 :: short_int
L0:
    r0 = 2
    x = r0
    r1 = 2
    y = r1
    r2 = 4
    x = r2
    return x
(0, 0)   {}                      {r0}
(0, 1)   {r0}                    {}
(0, 2)   {}                      {r1}
(0, 3)   {r1}                    {}
(0, 4)   {}                      {r2}
(0, 5)   {r2}                    {x}
(0, 6)   {x}                     {}

[case testSpecial2_Liveness]
def f(a: int) -> int:
    a = 1
    a = 2
    a = 3
    return a
[out]
def f(a):
    a :: int
    r0, r1, r2 :: short_int
L0:
    r0 = 2
    a = r0
    r1 = 4
    a = r1
    r2 = 6
    a = r2
    return a
(0, 0)   {}                      {r0}
(0, 1)   {r0}                    {}
(0, 2)   {}                      {r1}
(0, 3)   {r1}                    {}
(0, 4)   {}                      {r2}
(0, 5)   {r2}                    {a}
(0, 6)   {a}                     {}

[case testSimple_MustDefined]
def f(a: int) -> None:
    if a == 1:
        y = 1
        x = 2
    else:
        x = 2
[out]
def f(a):
    a :: int
    r0 :: short_int
    r1 :: bool
    r2, r3, r4 :: native_int
    r5, r6, r7 :: bool
    r8 :: short_int
    y :: int
    r9 :: short_int
    x :: int
    r10 :: short_int
    r11 :: None
L0:
    r0 = 2
    r2 = 1
    r3 = a & r2
    r4 = 0
    r5 = r3 == r4
    if r5 goto L1 else goto L2 :: bool
L1:
    r6 = a == r0
    r1 = r6
    goto L3
L2:
    r7 = CPyTagged_IsEq_(a, r0)
    r1 = r7
L3:
    if r1 goto L4 else goto L5 :: bool
L4:
    r8 = 2
    y = r8
    r9 = 4
    x = r9
    goto L6
L5:
    r10 = 4
    x = r10
L6:
    r11 = None
    return r11
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(0, 5)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a, r1}
(1, 2)   {a, r1}                 {a, r1}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a, r1}
(2, 2)   {a, r1}                 {a, r1}
(3, 0)   {a, r1}                 {a, r1}
(4, 0)   {a, r1}                 {a, r1}
(4, 1)   {a, r1}                 {a, r1, y}
(4, 2)   {a, r1, y}              {a, r1, y}
(4, 3)   {a, r1, y}              {a, r1, x, y}
(4, 4)   {a, r1, x, y}           {a, r1, x, y}
(5, 0)   {a, r1}                 {a, r1}
(5, 1)   {a, r1}                 {a, r1, x}
(5, 2)   {a, r1, x}              {a, r1, x}
(6, 0)   {a, r1, x}              {a, r1, x}
(6, 1)   {a, r1, x}              {a, r1, x}

[case testTwoArgs_MustDefined]
def f(x: int, y: int) -> int:
    return x
[out]
def f(x, y):
    x, y :: int
L0:
    return x
(0, 0)   {x, y}                  {x, y}

[case testLoop_MustDefined]
def f(n: int) -> None:
    while n < 5:
        n = n + 1
        m = n
[out]
def f(n):
    n :: int
    r0 :: short_int
    r1 :: bool
    r2, r3, r4 :: native_int
    r5 :: bool
    r6, r7, r8 :: native_int
    r9, r10, r11, r12 :: bool
    r13 :: short_int
    r14, m :: int
    r15 :: None
L0:
L1:
    r0 = 10
    r2 = 1
    r3 = n & r2
    r4 = 0
    r5 = r3 == r4
    r6 = 1
    r7 = r0 & r6
    r8 = 0
    r9 = r7 == r8
    r10 = r5 & r9
    if r10 goto L2 else goto L3 :: bool
L2:
    r11 = n < r0 :: signed
    r1 = r11
    goto L4
L3:
    r12 = CPyTagged_IsLt_(n, r0)
    r1 = r12
L4:
    if r1 goto L5 else goto L6 :: bool
L5:
    r13 = 2
    r14 = CPyTagged_Add(n, r13)
    n = r14
    m = n
    goto L1
L6:
    r15 = None
    return r15
(0, 0)   {n}                     {n}
(1, 0)   {n}                     {n}
(1, 1)   {n}                     {n}
(1, 2)   {n}                     {n}
(1, 3)   {n}                     {n}
(1, 4)   {n}                     {n}
(1, 5)   {n}                     {n}
(1, 6)   {n}                     {n}
(1, 7)   {n}                     {n}
(1, 8)   {n}                     {n}
(1, 9)   {n}                     {n}
(1, 10)  {n}                     {n}
(2, 0)   {n}                     {n}
(2, 1)   {n}                     {n, r1}
(2, 2)   {n, r1}                 {n, r1}
(3, 0)   {n}                     {n}
(3, 1)   {n}                     {n, r1}
(3, 2)   {n, r1}                 {n, r1}
(4, 0)   {n, r1}                 {n, r1}
(5, 0)   {n, r1}                 {n, r1}
(5, 1)   {n, r1}                 {n, r1}
(5, 2)   {n, r1}                 {n, r1}
(5, 3)   {n, r1}                 {m, n, r1}
(5, 4)   {m, n, r1}              {m, n, r1}
(6, 0)   {n, r1}                 {n, r1}
(6, 1)   {n, r1}                 {n, r1}

[case testMultiPass_Liveness]
def f(n: int) -> None:
    x = 1
    y = 1
    while n < 1:
        n = y
        while n < 2:
            n = 1
            n = x
[out]
def f(n):
    n :: int
    r0 :: short_int
    x :: int
    r1 :: short_int
    y :: int
    r2 :: short_int
    r3 :: bool
    r4, r5, r6 :: native_int
    r7 :: bool
    r8, r9, r10 :: native_int
    r11, r12, r13, r14 :: bool
    r15 :: short_int
    r16 :: bool
    r17, r18, r19 :: native_int
    r20 :: bool
    r21, r22, r23 :: native_int
    r24, r25, r26, r27 :: bool
    r28 :: short_int
    r29 :: None
L0:
    r0 = 2
    x = r0
    r1 = 2
    y = r1
L1:
    r2 = 2
    r4 = 1
    r5 = n & r4
    r6 = 0
    r7 = r5 == r6
    r8 = 1
    r9 = r2 & r8
    r10 = 0
    r11 = r9 == r10
    r12 = r7 & r11
    if r12 goto L2 else goto L3 :: bool
L2:
    r13 = n < r2 :: signed
    r3 = r13
    goto L4
L3:
    r14 = CPyTagged_IsLt_(n, r2)
    r3 = r14
L4:
    if r3 goto L5 else goto L12 :: bool
L5:
    n = y
L6:
    r15 = 4
    r17 = 1
    r18 = n & r17
    r19 = 0
    r20 = r18 == r19
    r21 = 1
    r22 = r15 & r21
    r23 = 0
    r24 = r22 == r23
    r25 = r20 & r24
    if r25 goto L7 else goto L8 :: bool
L7:
    r26 = n < r15 :: signed
    r16 = r26
    goto L9
L8:
    r27 = CPyTagged_IsLt_(n, r15)
    r16 = r27
L9:
    if r16 goto L10 else goto L11 :: bool
L10:
    r28 = 2
    n = r28
    n = x
    goto L6
L11:
    goto L1
L12:
    r29 = None
    return r29
(0, 0)   {n}                     {n, r0}
(0, 1)   {n, r0}                 {n, x}
(0, 2)   {n, x}                  {n, r1, x}
(0, 3)   {n, r1, x}              {n, x, y}
(0, 4)   {n, x, y}               {n, x, y}
(1, 0)   {n, x, y}               {n, r2, x, y}
(1, 1)   {n, r2, x, y}           {n, r2, r4, x, y}
(1, 2)   {n, r2, r4, x, y}       {n, r2, r5, x, y}
(1, 3)   {n, r2, r5, x, y}       {n, r2, r5, r6, x, y}
(1, 4)   {n, r2, r5, r6, x, y}   {n, r2, r7, x, y}
(1, 5)   {n, r2, r7, x, y}       {n, r2, r7, r8, x, y}
(1, 6)   {n, r2, r7, r8, x, y}   {n, r2, r7, r9, x, y}
(1, 7)   {n, r2, r7, r9, x, y}   {n, r10, r2, r7, r9, x, y}
(1, 8)   {n, r10, r2, r7, r9, x, y} {n, r11, r2, r7, x, y}
(1, 9)   {n, r11, r2, r7, x, y}  {n, r12, r2, x, y}
(1, 10)  {n, r12, r2, x, y}      {n, r2, x, y}
(2, 0)   {n, r2, x, y}           {r13, x, y}
(2, 1)   {r13, x, y}             {r3, x, y}
(2, 2)   {r3, x, y}              {r3, x, y}
(3, 0)   {n, r2, x, y}           {r14, x, y}
(3, 1)   {r14, x, y}             {r3, x, y}
(3, 2)   {r3, x, y}              {r3, x, y}
(4, 0)   {r3, x, y}              {x, y}
(5, 0)   {x, y}                  {n, x, y}
(5, 1)   {n, x, y}               {n, x, y}
(6, 0)   {n, x, y}               {n, r15, x, y}
(6, 1)   {n, r15, x, y}          {n, r15, r17, x, y}
(6, 2)   {n, r15, r17, x, y}     {n, r15, r18, x, y}
(6, 3)   {n, r15, r18, x, y}     {n, r15, r18, r19, x, y}
(6, 4)   {n, r15, r18, r19, x, y} {n, r15, r20, x, y}
(6, 5)   {n, r15, r20, x, y}     {n, r15, r20, r21, x, y}
(6, 6)   {n, r15, r20, r21, x, y} {n, r15, r20, r22, x, y}
(6, 7)   {n, r15, r20, r22, x, y} {n, r15, r20, r22, r23, x, y}
(6, 8)   {n, r15, r20, r22, r23, x, y} {n, r15, r20, r24, x, y}
(6, 9)   {n, r15, r20, r24, x, y} {n, r15, r25, x, y}
(6, 10)  {n, r15, r25, x, y}     {n, r15, x, y}
(7, 0)   {n, r15, x, y}          {n, r26, x, y}
(7, 1)   {n, r26, x, y}          {n, r16, x, y}
(7, 2)   {n, r16, x, y}          {n, r16, x, y}
(8, 0)   {n, r15, x, y}          {n, r27, x, y}
(8, 1)   {n, r27, x, y}          {n, r16, x, y}
(8, 2)   {n, r16, x, y}          {n, r16, x, y}
(9, 0)   {n, r16, x, y}          {n, x, y}
(10, 0)  {x, y}                  {r28, x, y}
(10, 1)  {r28, x, y}             {x, y}
(10, 2)  {x, y}                  {n, x, y}
(10, 3)  {n, x, y}               {n, x, y}
(11, 0)  {n, x, y}               {n, x, y}
(12, 0)  {}                      {r29}
(12, 1)  {r29}                   {}

[case testCall_Liveness]
def f(x: int) -> int:
    a = f(1)
    return f(a) + a
[out]
def f(x):
    x :: int
    r0 :: short_int
    r1, a, r2, r3, r4 :: int
L0:
    r0 = 2
    r1 = f(r0)
    if is_error(r1) goto L3 (error at f:2) else goto L1
L1:
    a = r1
    r2 = f(a)
    if is_error(r2) goto L3 (error at f:3) else goto L2
L2:
    r3 = CPyTagged_Add(r2, a)
    return r3
L3:
    r4 = <error> :: int
    return r4
(0, 0)   {}                      {r0}
(0, 1)   {r0}                    {r1}
(0, 2)   {r1}                    {r1}
(1, 0)   {r1}                    {a}
(1, 1)   {a}                     {a, r2}
(1, 2)   {a, r2}                 {a, r2}
(2, 0)   {a, r2}                 {r3}
(2, 1)   {r3}                    {}
(3, 0)   {}                      {r4}
(3, 1)   {r4}                    {}

[case testLoop_MaybeDefined]
def f(a: int) -> None:
    while a < a:
        while a < a:
            y = a
        x = a
[out]
def f(a):
    a :: int
    r0 :: bool
    r1, r2, r3 :: native_int
    r4 :: bool
    r5, r6, r7 :: native_int
    r8, r9, r10, r11, r12 :: bool
    r13, r14, r15 :: native_int
    r16 :: bool
    r17, r18, r19 :: native_int
    r20, r21, r22, r23 :: bool
    y, x :: int
    r24 :: None
L0:
L1:
    r1 = 1
    r2 = a & r1
    r3 = 0
    r4 = r2 == r3
    r5 = 1
    r6 = a & r5
    r7 = 0
    r8 = r6 == r7
    r9 = r4 & r8
    if r9 goto L2 else goto L3 :: bool
L2:
    r10 = a < a :: signed
    r0 = r10
    goto L4
L3:
    r11 = CPyTagged_IsLt_(a, a)
    r0 = r11
L4:
    if r0 goto L5 else goto L12 :: bool
L5:
L6:
    r13 = 1
    r14 = a & r13
    r15 = 0
    r16 = r14 == r15
    r17 = 1
    r18 = a & r17
    r19 = 0
    r20 = r18 == r19
    r21 = r16 & r20
    if r21 goto L7 else goto L8 :: bool
L7:
    r22 = a < a :: signed
    r12 = r22
    goto L9
L8:
    r23 = CPyTagged_IsLt_(a, a)
    r12 = r23
L9:
    if r12 goto L10 else goto L11 :: bool
L10:
    y = a
    goto L6
L11:
    x = a
    goto L1
L12:
    r24 = None
    return r24
(0, 0)   {a}                     {a}
(1, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 3)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 4)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 5)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 6)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 7)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 8)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(1, 9)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(2, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(2, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(2, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(3, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(3, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(3, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(4, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(5, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 3)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 4)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 5)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 6)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 7)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 8)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(6, 9)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(7, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(7, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(7, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(8, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(8, 1)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(8, 2)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(9, 0)   {a, r0, r12, x, y}      {a, r0, r12, x, y}
(10, 0)  {a, r0, r12, x, y}      {a, r0, r12, x, y}
(10, 1)  {a, r0, r12, x, y}      {a, r0, r12, x, y}
(11, 0)  {a, r0, r12, x, y}      {a, r0, r12, x, y}
(11, 1)  {a, r0, r12, x, y}      {a, r0, r12, x, y}
(12, 0)  {a, r0, r12, x, y}      {a, r0, r12, x, y}
(12, 1)  {a, r0, r12, x, y}      {a, r0, r12, x, y}

[case testTrivial_BorrowedArgument]
def f(a: int, b: int) -> int:
    return b
[out]
def f(a, b):
    a, b :: int
L0:
    return b
(0, 0)   {a, b}                  {a, b}

[case testSimple_BorrowedArgument]
def f(a: int) -> int:
    b = a
    a = 1
    return a
[out]
def f(a):
    a, b :: int
    r0 :: short_int
L0:
    b = a
    r0 = 2
    a = r0
    return a
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {}
(0, 3)   {}                      {}

[case testConditional_BorrowedArgument]
def f(a: int) -> int:
    if a == a:
        x = 2
        a = 1
    else:
        x = 1
    return x
[out]
def f(a):
    a :: int
    r0 :: bool
    r1, r2, r3 :: native_int
    r4, r5, r6 :: bool
    r7 :: short_int
    x :: int
    r8, r9 :: short_int
L0:
    r1 = 1
    r2 = a & r1
    r3 = 0
    r4 = r2 == r3
    if r4 goto L1 else goto L2 :: bool
L1:
    r5 = a == a
    r0 = r5
    goto L3
L2:
    r6 = CPyTagged_IsEq_(a, a)
    r0 = r6
L3:
    if r0 goto L4 else goto L5 :: bool
L4:
    r7 = 4
    x = r7
    r8 = 2
    a = r8
    goto L6
L5:
    r9 = 2
    x = r9
L6:
    return x
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a}
(1, 2)   {a}                     {a}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(2, 2)   {a}                     {a}
(3, 0)   {a}                     {a}
(4, 0)   {a}                     {a}
(4, 1)   {a}                     {a}
(4, 2)   {a}                     {a}
(4, 3)   {a}                     {}
(4, 4)   {}                      {}
(5, 0)   {a}                     {a}
(5, 1)   {a}                     {a}
(5, 2)   {a}                     {a}
(6, 0)   {}                      {}

[case testLoop_BorrowedArgument]
def f(a: int) -> int:
    sum = 0
    i = 0
    while i <= a:
        sum = sum + i
        i = i + 1
    return sum
[out]
def f(a):
    a :: int
    r0 :: short_int
    sum :: int
    r1 :: short_int
    i :: int
    r2 :: bool
    r3 :: int
    r4 :: short_int
    r5 :: int
L0:
    r0 = 0
    sum = r0
    r1 = 0
    i = r1
L1:
    r2 = CPyTagged_IsLe(i, a)
    if r2 goto L2 else goto L3 :: bool
L2:
    r3 = CPyTagged_Add(sum, i)
    sum = r3
    r4 = 2
    r5 = CPyTagged_Add(i, r4)
    i = r5
    goto L1
L3:
    return sum
(0, 0)   {a}                     {a}
(0, 1)   {a}                     {a}
(0, 2)   {a}                     {a}
(0, 3)   {a}                     {a}
(0, 4)   {a}                     {a}
(1, 0)   {a}                     {a}
(1, 1)   {a}                     {a}
(2, 0)   {a}                     {a}
(2, 1)   {a}                     {a}
(2, 2)   {a}                     {a}
(2, 3)   {a}                     {a}
(2, 4)   {a}                     {a}
(2, 5)   {a}                     {a}
(3, 0)   {a}                     {a}

[case testError]
def f(x: List[int]) -> None: pass # E: Name 'List' is not defined \
                                  # N: Did you forget to import it from "typing"? (Suggestion: "from typing import List")

[case testExceptUndefined_Liveness]
def lol(x: object) -> int:
    try:
        st = id(x)
    except Exception:
        return -1
    return st + 1
[out]
def lol(x):
    x :: object
    r0, st :: int
    r1 :: tuple[object, object, object]
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: bool
    r6 :: short_int
    r7 :: int
    r8 :: bool
    r9 :: short_int
    r10, r11 :: int
    r12 :: bool
L0:
L1:
    r0 = CPyTagged_Id(x)
    st = r0
    goto L10
L2:
    r1 = CPy_CatchError()
    r2 = builtins :: module
    r3 = unicode_1 :: static  ('Exception')
    r4 = getattr r2, r3
    if is_error(r4) goto L8 (error at lol:4) else goto L3
L3:
    r5 = CPy_ExceptionMatches(r4)
    if r5 goto L4 else goto L5 :: bool
L4:
    r6 = 2
    r7 = CPyTagged_Negate(r6)
    CPy_RestoreExcInfo(r1)
    return r7
L5:
    CPy_Reraise()
    r12 = 0
    if not r12 goto L8 else goto L6 :: bool
L6:
    unreachable
L7:
    CPy_RestoreExcInfo(r1)
    goto L10
L8:
    CPy_RestoreExcInfo(r1)
    r8 = keep_propagating
    if not r8 goto L11 else goto L9 :: bool
L9:
    unreachable
L10:
    r9 = 2
    r10 = CPyTagged_Add(st, r9)
    return r10
L11:
    r11 = <error> :: int
    return r11
(0, 0)   {x}                     {x}
(1, 0)   {x}                     {r0}
(1, 1)   {r0}                    {st}
(1, 2)   {st}                    {st}
(2, 0)   {}                      {r1}
(2, 1)   {r1}                    {r1, r2}
(2, 2)   {r1, r2}                {r1, r2, r3}
(2, 3)   {r1, r2, r3}            {r1, r4}
(2, 4)   {r1, r4}                {r1, r4}
(3, 0)   {r1, r4}                {r1, r5}
(3, 1)   {r1, r5}                {r1}
(4, 0)   {r1}                    {r1, r6}
(4, 1)   {r1, r6}                {r1, r7}
(4, 2)   {r1, r7}                {r7}
(4, 3)   {r7}                    {}
(5, 0)   {r1}                    {r1}
(5, 1)   {r1}                    {r1, r12}
(5, 2)   {r1, r12}               {r1}
(6, 0)   {}                      {}
(7, 0)   {r1, st}                {st}
(7, 1)   {st}                    {st}
(8, 0)   {r1}                    {}
(8, 1)   {}                      {r8}
(8, 2)   {r8}                    {}
(9, 0)   {}                      {}
(10, 0)  {st}                    {r9, st}
(10, 1)  {r9, st}                {r10}
(10, 2)  {r10}                   {}
(11, 0)  {}                      {r11}
(11, 1)  {r11}                   {}

