[case testIsinstanceInt]
def is_int(value: object) -> bool:
    return isinstance(value, int)

[out]
def is_int(value):
    value, r0 :: object
    r1 :: int32
    r2 :: bit
    r3 :: bool
L0:
    r0 = load_address PyLong_Type
    r1 = PyObject_IsInstance(value, r0)
    r2 = r1 >= 0 :: signed
    r3 = truncate r1: int32 to builtins.bool
    return r3

[case testIsinstanceNotBool1]
def is_not_bool(value: object) -> bool:
    return not isinstance(value, bool)

[out]
def is_not_bool(value):
    value, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: int32
    r4 :: bit
    r5, r6 :: bool
L0:
    r0 = builtins :: module
    r1 = 'bool'
    r2 = CPyObject_GetAttr(r0, r1)
    r3 = PyObject_IsInstance(value, r2)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = r5 ^ 1
    return r6

[case testIsinstanceNotBoolAndIsInt]
# This test is to ensure that 'value' doesn't get coerced into a bool when we need it to be an int
def is_not_bool_and_is_int(value: object) -> bool:
    return not isinstance(value, bool) and isinstance(value, int)

[out]
def is_not_bool_and_is_int(value):
    value, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: int32
    r4 :: bit
    r5, r6, r7 :: bool
    r8 :: object
    r9 :: int32
    r10 :: bit
    r11 :: bool
L0:
    r0 = builtins :: module
    r1 = 'bool'
    r2 = CPyObject_GetAttr(r0, r1)
    r3 = PyObject_IsInstance(value, r2)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = r5 ^ 1
    if r6 goto L2 else goto L1 :: bool
L1:
    r7 = r6
    goto L3
L2:
    r8 = load_address PyLong_Type
    r9 = PyObject_IsInstance(value, r8)
    r10 = r9 >= 0 :: signed
    r11 = truncate r9: int32 to builtins.bool
    r7 = r11
L3:
    return r7
