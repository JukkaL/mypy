[case testIsinstanceInt]
def is_int(value):
    return isinstance(value, int)

[out]
def is_int(value):
    value, r0 :: object
    r1 :: int32
    r2 :: bit
    r3 :: bool
    r4 :: object
L0:
    r0 = load_address PyLong_Type
    r1 = PyObject_IsInstance(value, r0)
    r2 = r1 >= 0 :: signed
    r3 = truncate r1: int32 to builtins.bool
    r4 = box(int32, r1)
    return r4

[case testIsinstanceNotBool1]
def is_not_bool(value):
    return not isinstance(value, bool)

[out]
def is_not_bool(value):
    value, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: int32
    r4 :: bit
    r5 :: bool
    r6 :: object
    r7 :: int32
    r8 :: bit
    r9 :: bool
    r10 :: object
L0:
    r0 = builtins :: module
    r1 = 'bool'
    r2 = CPyObject_GetAttr(r0, r1)
    r3 = PyObject_IsInstance(value, r2)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = box(int32, r3)
    r7 = PyObject_Not(r6)
    r8 = r7 >= 0 :: signed
    r9 = truncate r7: int32 to builtins.bool
    r10 = box(bool, r9)
    return r10

[case testIsinstanceNotBoolAndIsInt]
# This test is to ensure that 'value' doesn't get coerced into a bool when we need it to be an int
def is_not_bool_and_is_int(value):
    return not isinstance(value, bool) and isinstance(value, int)

[out]
def is_not_bool_and_is_int(value):
    value, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: int32
    r4 :: bit
    r5 :: bool
    r6 :: object
    r7 :: int32
    r8 :: bit
    r9 :: bool
    r10, r11, r12 :: object
    r13 :: int32
    r14 :: bit
    r15 :: bool
    r16 :: object
L0:
    r0 = builtins :: module
    r1 = 'bool'
    r2 = CPyObject_GetAttr(r0, r1)
    r3 = PyObject_IsInstance(value, r2)
    r4 = r3 >= 0 :: signed
    r5 = truncate r3: int32 to builtins.bool
    r6 = box(int32, r3)
    r7 = PyObject_Not(r6)
    r8 = r7 >= 0 :: signed
    r9 = truncate r7: int32 to builtins.bool
    if r9 goto L2 else goto L1 :: bool
L1:
    r10 = box(bool, r9)
    r11 = r10
    goto L3
L2:
    r12 = load_address PyLong_Type
    r13 = PyObject_IsInstance(value, r12)
    r14 = r13 >= 0 :: signed
    r15 = truncate r13: int32 to builtins.bool
    r16 = box(int32, r13)
    r11 = r16
L3:
    return r11
