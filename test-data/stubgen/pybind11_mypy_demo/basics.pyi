from typing import overload
PI: float

class Point:
    class AngleUnit:
        __entries: dict = ...
        degree: Point.AngleUnit = ...
        radian: Point.AngleUnit = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def __doc__(self) -> str: ...
        @property
        def __members__(self) -> dict: ...

    class LengthUnit:
        __entries: dict = ...
        inch: Point.LengthUnit = ...
        mm: Point.LengthUnit = ...
        pixel: Point.LengthUnit = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def __doc__(self) -> str: ...
        @property
        def __members__(self) -> dict: ...
    origin: Point = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, x: float, y: float) -> None: ...
    @overload
    def distance_to(self, x: float, y: float) -> float: ...
    @overload
    def distance_to(self, other: Point) -> float: ...
    @property
    def angle_unit(self) -> Point.AngleUnit: ...
    @angle_unit.setter
    def angle_unit(self, val: Point.AngleUnit) -> None: ...
    @property
    def length(self) -> float: ...
    @property
    def length_unit(self) -> Point.LengthUnit: ...
    @length_unit.setter
    def length_unit(self, val: Point.LengthUnit) -> None: ...
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, val: float) -> None: ...
    @property
    def x_axis(self) -> Point: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, val: float) -> None: ...
    @property
    def y_axis(self) -> Point: ...

def answer() -> int: ...
def midpoint(left: float, right: float) -> float: ...
def sum(arg0: int, arg1: int) -> int: ...
def weighted_midpoint(left: float, right: float, alpha: float = ...) -> float: ...
