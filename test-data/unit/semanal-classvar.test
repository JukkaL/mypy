[case testClassVarDef]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar[int]
[out]
MypyFile:1(
  ImportFrom:1(typing, [ClassVar])
  ClassDef:2(
    A
    AssignmentStmt:3(
      NameExpr(x [m])
      IntExpr(1)
      builtins.int)))

[case testClassVarDefInModuleScope]
from typing import ClassVar
x = None  # type: ClassVar[int]
[out]
main:2: error: Invalid ClassVar definition

[case testClassVarDefInFuncScope]
from typing import ClassVar
def f() -> None:
    x = None  # type: ClassVar[int]
[out]
main:3: error: Invalid ClassVar definition

[case testClassVarTooManyArguments]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar[int, str]
[out]
main:3: error: ClassVar[...] must have exactly one type argument

[case testClassVarWithoutArguments]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar
[out]
MypyFile:1(
  ImportFrom:1(typing, [ClassVar])
  ClassDef:2(
    A
    AssignmentStmt:3(
      NameExpr(x [m])
      IntExpr(1)
      Any)))

[case testOverrideWithNormalAttribute]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar[int]
class B(A):
    x = 2  # type: int
[out]
main:5: error: Invalid class attribute definition (previously declared on base class "A")

[case testOverrideWithAttributeWithClassVar]
from typing import ClassVar
class A:
    x = 1  # type: int
class B(A):
    x = 2  # type: ClassVar[int]
[out]
main:5: error: Invalid class attribute definition (previously declared on base class "A")

[case testOverrideClassVarWithInstanceVariable]
from typing import ClassVar
class A:
    x = 1  # type: int
class B(A):
    x = 2  # type: ClassVar[int]
[out]
main:5: error: Invalid class attribute definition (previously declared on base class "A")

[case testOverrideClassVarManyBases]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar[int]
class B:
    x = 2  # type: int
class C(A, B):
    x = 3  # type: ClassVar[int]
[out]
main:7: error: Invalid class attribute definition (previously declared on base class "B")

[case testOverrideClassVarWithClassVar]
from typing import ClassVar
class A:
    x = 1  # type: ClassVar[int]
class B(A):
    x = 2  # type: ClassVar[int]
[out]
MypyFile:1(
  ImportFrom:1(typing, [ClassVar])
  ClassDef:2(
    A
    AssignmentStmt:3(
      NameExpr(x [m])
      IntExpr(1)
      builtins.int))
  ClassDef:4(
    B
    BaseType(
      __main__.A)
    AssignmentStmt:5(
      NameExpr(x [m])
      IntExpr(2)
      builtins.int)))

[case testOverrideOnABCSubclass]
from abc import ABCMeta
from typing import ClassVar
class A(metaclass=ABCMeta):
    x = None  # type: ClassVar[int]
class B(A):
    x = 0  # type: ClassVar[int]
[out]
MypyFile:1(
  ImportFrom:1(abc, [ABCMeta])
  ImportFrom:2(typing, [ClassVar])
  ClassDef:3(
    A
    Metaclass(ABCMeta)
    AssignmentStmt:4(
      NameExpr(x [m])
      NameExpr(None [builtins.None])
      builtins.int))
  ClassDef:5(
    B
    BaseType(
      __main__.A)
    AssignmentStmt:6(
      NameExpr(x [m])
      IntExpr(0)
      builtins.int)))

[case testClassVarWithTypeVar]
from typing import ClassVar, TypeVar
T = TypeVar('T')
class A:
    x = None  # type: ClassVar[T]
[out]
main:4: error: Invalid type "__main__.T"
