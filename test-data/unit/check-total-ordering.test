[case testTotalOrderingInference]
from functools import total_ordering
from typing import Any

@total_ordering
class Ord:
    def __eq__(self, other: Any) -> bool:
        return False

    def __lt__(self, other: "Ord") -> bool:
        return False

Ord() <= Ord()

[builtins fixtures/dict.pyi]
[case testTotalOrderingObjectEq]
from functools import total_ordering
from typing import Any

@total_ordering
class Ord:  # N: Combining inherited object.__eq__ with total_ordering is unlikely to be correct
    def __lt__(self, other: "Ord") -> bool:
        return False

[builtins fixtures/dict.pyi]
[case testTotalOrderingNoLt]
from functools import total_ordering
from typing import Any

@total_ordering
class Ord:  # E: Classes with total_ordering must define one of __{lt, gt, le, ge}__
    def __eq__(self, other: Any) -> bool:
        return False

[builtins fixtures/dict.pyi]

[case testTotalOrderingInherited]
from functools import total_ordering
from typing import Any

class Super:
    def __eq__(self, other: Any) -> bool:
        return False

@total_ordering
class Ord(Super):
    def __lt__(self, other: "Ord") -> bool:
        return False

Ord() <= Ord()

[builtins fixtures/dict.pyi]
