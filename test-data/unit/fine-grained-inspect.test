[case testInspectTypeBasic]

[out]
==

[case testInspectAttrsBasic]

[out]
==

[case testInspectDefBasic]

[out]
==

[case testInspectFallbackAttributes]
# inspect2: --show=attrs --include-object-attrs foo.py:5:1
# inspect2: --show=attrs foo.py:8:1
# inspect2: --show=attrs --include-kind foo.py:10:1
# inspect2: --show=attrs --include-kind --include-object-attrs foo.py:10:1
import foo
[file foo.py]
class B: ...
class C(B):
    x: int
c: C
c  # line 5

t = 42, "foo"
t  # line 8

None
[builtins fixtures/args.pyi]
[out]
==
{"C": ["x"], "object": ["__eq__", "__init__", "__ne__"]}
{"Iterable": ["__iter__"]}
NameExpr -> {}
NameExpr -> {"object": ["__eq__", "__init__", "__ne__"]}

[case testInspectTypeVarBoundAttrs]

[out]
==

[case testInspectTypeVarValuesAttrs]

[out]
==

[case testInspectTypeVarBoundDef]

[out]
==

[case testInspectTypeVarValuesDef]

[out]
==

[case testInspectClassObjAttrs]

[out]
==

[case testInspectClassObjDef]

[out]
==

[case testInspectModuleAttrs]

[out]
==

[case testInspectModuleDef]

[out]
==

[case testInspectFunctionArgDef]
# inspect2: --show=definition --include-span foo.py:4:13
# TODO: for now all arguments have line/column set to function definition.
import foo
[file foo.py]
def foo(arg: int) -> int:
    pass
    pass
    return arg

[out]
==
4:12:4:14 -> tmp/foo.py:1:1:arg
