[case testUntypedAttrS]
import attr
@attr.s
class UnTyped:
    normal = attr.ib()
    _private = attr.ib()
    def_arg = attr.ib(18)
    _def_kwarg = attr.ib(validator=None, default=18)

    CLASS_VAR = 18
reveal_type(UnTyped)  # E: Revealed type is 'def (normal: Any, private: Any, def_arg: Any =, def_kwarg: Any =) -> __main__.UnTyped'
UnTyped(1, 2)
UnTyped('1', '2', '3')
UnTyped('1', '2', '3', 4)
UnTyped('1', '2', def_kwarg='5')
UnTyped('1', '2', def_kwarg='5')
UnTyped(normal=1, private=2, def_arg=3, def_kwarg=4)
UnTyped()  # E: Too few arguments for "UnTyped"
UnTyped(1, 2) == UnTyped(2, 3)
UnTyped(1, 2) >= UnTyped(2, 3)
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testUntypedNoUntypedAttrS]
# flags: --disallow-untyped-defs
import attr
@attr.s
class UnTyped:
    normal = attr.ib()  # E: Need type annotation for variable
    _private = attr.ib()  # E: Need type annotation for variable
    def_arg = attr.ib(18)  # E: Need type annotation for variable
    _def_kwarg = attr.ib(validator=None, default=18)   # E: Need type annotation for variable

    CLASS_VAR = 18
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testTypedAttrS]
import attr
import typing
@attr.s
class Typed:
    normal: int = attr.ib()
    _private: int = attr.ib()
    def_arg: int = attr.ib(18)
    _def_kwarg: int = attr.ib(validator=None, default=18)
    UNTYPED_CLASS_VAR = 7
    TYPED_CLASS_VAR: typing.ClassVar[int] = 22
reveal_type(Typed)  # E: Revealed type is 'def (normal: builtins.int, private: builtins.int, def_arg: builtins.int =, def_kwarg: builtins.int =) -> __main__.Typed'
Typed(1, 2)
Typed(1, 2, 3)
Typed(1, 2, 3, 4)
Typed(1, 2, def_kwarg=5)
Typed(1, 2, def_kwarg=5)
Typed(normal=1, private=2, def_arg=3, def_kwarg=4)
Typed()  # E: Too few arguments for "Typed"
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testAutoAttribAttrS]
import attr
import typing
@attr.s(auto_attribs=True)
class Auto:
    normal: int
    _private: int
    def_arg: int = 18
    _def_kwarg: int = attr.ib(validator=None, default=18)

    UNTYPED_CLASS_VAR = 18
    TYPED_CLASS_VAR: typing.ClassVar[int] = 18

reveal_type(Auto)  # E: Revealed type is 'def (normal: builtins.int, private: builtins.int, def_arg: builtins.int =, def_kwarg: builtins.int =) -> __main__.Auto'
Auto(1, 2)
Auto(1, 2, 3)
Auto(1, 2, 3, 4)
Auto(1, 2, def_kwarg=5)
Auto(1, 2, def_kwarg=5)
Auto(normal=1, private=2, def_arg=3, def_kwarg=4)
Auto()  # E: Too few arguments for "Auto"
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testSeriousNamesAttrS]
import typing
from attr import attrib, attrs
@attrs(auto_attribs=True)
class Auto:
    normal: int
    _private: int
    def_arg: int = 18
    _def_kwarg: int = attrib(validator=None, default=18)
    UNTYPED_CLASS_VAR = 18
    TYPED_CLASS_VAR: typing.ClassVar[int] = 18
reveal_type(Auto)  # E: Revealed type is 'def (normal: builtins.int, private: builtins.int, def_arg: builtins.int =, def_kwarg: builtins.int =) -> __main__.Auto'
Auto(1, 2)
Auto(1, 2, 3)
Auto(1, 2, 3, 4)
Auto(1, 2, def_kwarg=5)
Auto(1, 2, def_kwarg=5)
Auto(normal=1, private=2, def_arg=3, def_kwarg=4)
Auto()  # E: Too few arguments for "Auto"
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testNoInitAttrS]
from attr import attrib, attrs
@attrs(auto_attribs=True, init=False)
class Auto:
    normal: int
    _private: int
    def_arg: int = 18
    _def_kwarg: int = attrib(validator=None, default=18)
reveal_type(Auto)  # E: Revealed type is 'def () -> __main__.Auto'
Auto()
Auto() == Auto()
Auto() >= Auto()
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]

[case testNoCmpAttrS]
from attr import attrib, attrs
@attrs(auto_attribs=True, cmp=False)
class A:
    b: int
reveal_type(A)  # E: Revealed type is 'def (b: builtins.int) -> __main__.A'
A(5)
A(5) == A(5)
A(5) >= A(5)  # E: Unsupported left operand type for >= ("A")
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]


[case testInheritanceAttrS]
import attr

@attr.s
class A:
    a: int = attr.ib()

@attr.s
class B:
    b: str = attr.ib()

@attr.s  # type: ignore  # Incompatible base classes in re cmp methods
class C(B, A):
    c: bool = attr.ib()

reveal_type(C)  # E: Revealed type is 'def (a: builtins.int, b: builtins.str, c: builtins.bool) -> __main__.C'
[builtins fixtures/attr_builtins.pyi]
[add-module fixtures/attr.pyi]
