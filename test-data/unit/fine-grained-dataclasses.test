-- Test cases for fine-grained incremental checking of dataclasses
--
-- The comment at the top of fine-grained.test explains how these tests
-- work.

[case testDataclassesAsdictFineGrained]
# flags: --python-version 3.8
[file a.py]
from dataclasses import dataclass
from b import AttributeInOtherModule

@dataclass
class MyDataclass:
    attr: AttributeInOtherModule

[file b.py]
AttributeInOtherModule = str
[file c.py]
from dataclasses import asdict
from a import MyDataclass
reveal_type(asdict(MyDataclass('John')))

[file b.py.2]
from typing import List
class MyList(List[int]):
    pass
AttributeInOtherModule = MyList
[file c.py.2]
from dataclasses import asdict
from a import MyDataclass
from b import MyList
reveal_type(asdict(MyDataclass(MyList())))

[out]
c.py:3: note: Revealed type is 'TypedDict({'attr': builtins.str})'
==
c.py:4: note: Revealed type is 'TypedDict({'attr': builtins.list[builtins.int]})'
[typing fixtures/typing-full.pyi]
[builtins fixtures/list.pyi]
