[case testSimpleMatch]
# flags: --python-version 3.10
class A: ...
class B: ...
a: A
m: object

match m:
    case ["quit"]:
        a = B()  # E: Incompatible types in assignment (expression has type "B", variable has type "A")
    case ["look"]:
        a = A()

reveal_type(a)


[case testMatchAs]
# flags: --python-version 3.10
class A: ...
m: object

match m:
    case [x] as a:
        reveal_type(a)
        reveal_type(x)


[case testMatchOr]
# flags: --python-version 3.10
class A: ...
m: object

match m:
    case [x] | (x):
        reveal_type(x)


[case testMatchWithGuard]
# flags: --python-version 3.10
m: object

match m:
    case 1 if False:
        pass
    case 2:
        pass

[case testLiteralPattern]
# flags: --python-version 3.10
m: object
match m:
    case 1:
        pass
    case -1:
        pass
    case 1+2j:
        pass
    case -1+2j:
        pass
    case 1-2j:
        pass
    case -1-2j:
        pass
    case "str":
        pass
    case b"bytes":
        pass
    case r"raw_string":
        pass
    case None:
        pass
    case True:
        pass
    case False:
        pass


[case testCapturePattern]
# flags: --python-version 3.10
m: object
match m:
    case x:
        pass
    case longName:
        pass

[case testWildcardPattern]
# flags: --python-version 3.10
m: object
match m:
    case _:
        pass


[case testValuePattern]
# flags: --python-version 3.10
class A:
    b = 1
a = A()
m: object

match m:
    case a.b:
        pass


[case testGroupPattern]
# flags: --python-version 3.10
m: object

match m:
    case (1):
        pass


[case testSequencePattern]
# flags: --python-version 3.10
m: object

match m:
    case []:
        pass
    case ():
        pass
    case [1]:
        pass
    case (1,):
        pass
    case [1, 2, 3]:
        pass
    case (1, 2, 3):
        pass
    case [1, *a, 2]:
        pass
    case (1, *a, 2):
        pass
    case [1, *_, 2]:
        pass
    case (1, *_, 2):
        pass


[case testMappingPattern]
# flags: --python-version 3.10
class A:
    b = 'l'
    c = 2
a = A()
m: object

match m:
    case {'k': v}:
        pass
    case {a.b: v}:
        pass
    case {1: v}:
        pass
    case {a.c: v}:
        pass
    case {'k': v1, a.b: v2, 1: v3, a.c: v4}:
        pass
    case {'k1': 1, 'k2': "str", 'k3': b'bytes', 'k4': None}:
        pass
    case {'k': v, **r}:
        pass
    case {**r}:
        pass


[case testClassPattern]
# flags: --python-version 3.10
class A:
    pass
class B:
    __match_args__ = ('a', 'b')
    a: int
    b: int

m: object

match m:
    case A():
        pass
    case B(1, 2):
        pass
    case B(1, b=2):
        pass
    case B(a=1, b=2):
        pass
[builtins fixtures/tuple.pyi]
