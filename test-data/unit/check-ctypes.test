[case testCtypesArrayStandardElementType]
import ctypes

class MyCInt(ctypes.c_int):
    pass

intarr4 = ctypes.c_int * 4
a = intarr4(1, ctypes.c_int(2), MyCInt(3), 4)
intarr4(1, 2, 3, "invalid")  # E: Array constructor argument 4 of type "builtins.str" is not convertible to the array element type "ctypes.c_int"
reveal_type(a)  # E: Revealed type is 'ctypes.Array[ctypes.c_int]'
reveal_type(a[0])  # E: Revealed type is 'builtins.int'
reveal_type(a[1:3])  # E: Revealed type is 'builtins.list[builtins.int]'
a[0] = 42
a[1] = ctypes.c_int(42)
a[2] = MyCInt(42)
a[3] = b"bytes"  # E: No overload variant of "__setitem__" of "Array" matches argument types "int", "bytes" # N: Possible overload variants: # N:     def __setitem__(self, int, Union[c_int, int]) -> None # N:     def __setitem__(self, slice, List[Union[c_int, int]]) -> None
for x in a:
    reveal_type(x)  # E: Revealed type is 'builtins.int*'
[builtins fixtures/ctypes.pyi]

[case testCtypesArrayCustomElementType]
import ctypes

class MyCInt(ctypes.c_int):
    pass

myintarr4 = MyCInt * 4
mya = myintarr4(1, 2, MyCInt(3), 4)
myintarr4(1, ctypes.c_int(2), MyCInt(3), "invalid")  # E: Array constructor argument 2 of type "ctypes.c_int" is not convertible to the array element type "__main__.MyCInt" # E: Array constructor argument 4 of type "builtins.str" is not convertible to the array element type "__main__.MyCInt"
reveal_type(mya)  # E: Revealed type is 'ctypes.Array[__main__.MyCInt]'
reveal_type(mya[0])  # E: Revealed type is '__main__.MyCInt'
reveal_type(mya[1:3])  # E: Revealed type is 'builtins.list[__main__.MyCInt]'
mya[0] = 42
mya[1] = ctypes.c_int(42)  # E: No overload variant of "__setitem__" of "Array" matches argument types "int", "c_int" # N: Possible overload variants: # N:     def __setitem__(self, int, Union[MyCInt, int]) -> None # N:     def __setitem__(self, slice, List[Union[MyCInt, int]]) -> None
mya[2] = MyCInt(42)
mya[3] = b"bytes"  # E: No overload variant of "__setitem__" of "Array" matches argument types "int", "bytes" # N: Possible overload variants: # N:     def __setitem__(self, int, Union[MyCInt, int]) -> None # N:     def __setitem__(self, slice, List[Union[MyCInt, int]]) -> None
for myx in mya:
    reveal_type(myx)  # E: Revealed type is '__main__.MyCInt*'
[builtins fixtures/ctypes.pyi]
