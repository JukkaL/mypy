-- Test case for final qualifier
--

-- Definitions

[case testFinalDefiningModuleVar]
from typing import Final
x: Final = int()
y: Final[float] = int()
z: Final[int] = int()
bad: Final[str] = str()
reveal_type(x)  # E: Revealed type is 'builtins.int'
reveal_type(y)  # E: Revealed type is 'builtins.float'
reveal_type(z)  # E: Revealed type is 'builtins.int'
[out]

[case testFinalDefiningInstanceVar]
from typing import Final
class C:
    x: Final = int()
    y: Final[float] = int()
    z: Final[int] = int()
    bad: Final[str] = int()  # E: Incompatible types in assignment (expression has type "int", variable has type "str")
reveal_type(C.x)  # E: Revealed type is 'builtins.int'
reveal_type(C.y)  # E: Revealed type is 'builtins.float'
reveal_type(C.z)  # E: Revealed type is 'builtins.int'
reveal_type(C().x)  # E: Revealed type is 'builtins.int'
reveal_type(C().y)  # E: Revealed type is 'builtins.float'
reveal_type(C().z)  # E: Revealed type is 'builtins.int'
[out]

[case testFinalDefiningInstanceVarImplicit]
from typing import Final, Tuple, Any

class C:
    def __init__(self, x: Tuple[int, Any]) -> None:
        self.x: Final = x
        self.y: Final[float] = 1
reveal_type(C((1, 2)).x)  # E: Revealed type is 'Tuple[builtins.int, Any]'
reveal_type(C((1, 2)).y)  # E: Revealed type is 'builtins.float'
[out]

[case testFinalDefiningInstanceVarStubs]
# Allow skipping r.h.s.
import mod
[file mod.pyi]
from typing import Final
x: Final
y: Final[int]
class C:
    x: Final
    y: Final[int]
    def __init__(self) -> None:
        self.z: Final
[out]

[case testFinalDefiningFunc]

[out]

[case testFinalDefiningFuncOverloaded]

[out]

[case testFinalDefiningFuncOverloadedStubs]

[out]

[case testFinalDefiningMeth]

[out]

[case testFinalDefiningProperty]

[out]

[case testFinalDefiningOuterOnly]
from typing import Final, Callable, Tuple, Any
x: Tuple[Final]  # E: Final can be only used as an outermost type qualifier in assignments
y: Callable[[], Tuple[Final[int]]]  # E: Final can be only used as an outermost type qualifier in assignments
[out]

[case testFinalDefiningNotInMethod]
from typing import Final

def f(x: Final[int]) -> int: ...  # E: Final can be only used as an outermost type qualifier in assignments
def g(x: int) -> Final[int]: ...  # E: Final can be only used as an outermost type qualifier in assignments
[out]

[case testFinalDefiningNoRhs]
from typing import Final
x: Final  # E: Final declaration outside stubs must have right hand side
y: Final[int]  # E: Final declaration outside stubs must have right hand side
class C:
    x: Final  # E: Final declaration outside stubs must have right hand side
    y: Final[int]  # E: Final declaration outside stubs must have right hand side
    def __init__(self) -> None:
        self.z: Final  # E: Final declaration outside stubs must have right hand side
reveal_type(x)  # E: Revealed type is 'Any'
reveal_type(y)  # E: Revealed type is 'builtins.int'
reveal_type(C().x)  # E: Revealed type is 'Any'
reveal_type(C().y)  # E: Revealed type is 'builtins.int'
reveal_type(C().z)  # E: Revealed type is 'Any'
[out]

[case testFinalDefiningNoTypevarsExplicit]
from typing import Final, TypeVar, Generic, Tuple, Any

T = TypeVar('T')
d: Any

class C(Generic[T]):
    x: Final[Tuple[T, T]] = d
[out]

[case testFinalDefiningTypevarsImplicit]
from typing import Final, TypeVar, Generic, Tuple, Any

T = TypeVar('T')

class C(Generic[T]):
    def __init__(self, x: Tuple[T, T]) -> None:
        self.x: Final = x

reveal_type(C((1, 2)).x)
C.x
[out]

[case testFinalDefiningNotInOtherMethod]
from typing import Final, Any, Tuple

class C:
    def meth(self, x: Tuple[int, Any]) -> None:
        self.x: Final = x  # E: Can only declare final attributes in class body or __init__ method
        self.y: Final[float] = 1  # E: Can only declare final attributes in class body or __init__ method
[out]

[case testFinalDefiningOnlyOnSelf]
from typing import Final, Any, Tuple

class U:
    x: Any
    y: Any
class C:
    def __init__(self, x: Tuple[int, Any]) -> None:
        slf = U()
        slf.x: Final = x  # E: Final can be only applied to a name or an attribute on self
        slf.y: Final[float] = 1  # E: Type cannot be declared in assignment to non-self attribute \
                                 # E: Final can be only applied to a name or an attribute on self
[out]

-- Reassignments

[case testFinalReassignModuleVar]

[out]

[case testFinalReassignModuleFunc]

[out]

[case testFinalReassignModuleVarExternal]

[out]

[case testFinalReassignModuleFuncExternal]

[out]

[case testFinalReassignModuleFuncOverloaded]

[out]

[case testFinalReassignInstanceVarClassBody]

[out]

[case testFinalReassignInstanceVarInit]

[out]

[case testFinalReassignInstanceVarMethod]

[out]

[case testFinalReassignInstanceVarExternalClass]

[out]

[case testFinalReassignInstanceVarExternalInstance]

[out]

-- Overriding

[case testFinalOverridingVarClassBody]

[out]

[case testFinalOverridingVarInit]

[out]

[case testFinalOverridingVarOtherMethod]

[out]

[case testFinalOverridingVarMultipleInheritance]

[out]

[case testFinalOverridingVarMultipleInheritance2]

[out]

[case testFinalOverridingVarWithMethod]

[out]

[case testFinalOverridingMethodWithVar]

[out]

[case testFinalOverridingMethodWithVarImplicit]

[out]

[case testFinalOverridingMethodMultipleinheritance]

[out]

[case testFinalOverridingMethodMultiplaInheritance2]

[out]

[case testFinalOverridingClassMethod]

[out]

[case testFinalOverridingStaticMethod]

[out]

[case testFinalOverridingProperty]

[out]

[case testFinalAcessingImplicitVarSubclassObject]

[out]

[case testFinalOverridingMethodOverloads]

[out]
