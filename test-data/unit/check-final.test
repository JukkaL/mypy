-- Test cases for final qualifier
--

-- Definitions

[case testFinalDefiningModuleVar]
from typing import Final

x: Final = int()
y: Final[float] = int()
z: Final[int] = int()
bad: Final[str] = str()

reveal_type(x)  # E: Revealed type is 'builtins.int'
reveal_type(y)  # E: Revealed type is 'builtins.float'
reveal_type(z)  # E: Revealed type is 'builtins.int'
[out]

[case testFinalDefiningInstanceVar]
from typing import Final

class C:
    x: Final = int()
    y: Final[float] = int()
    z: Final[int] = int()
    bad: Final[str] = int()  # E: Incompatible types in assignment (expression has type "int", variable has type "str")
class D(C): pass

reveal_type(D.x)  # E: Revealed type is 'builtins.int'
reveal_type(D.y)  # E: Revealed type is 'builtins.float'
reveal_type(D.z)  # E: Revealed type is 'builtins.int'
reveal_type(D().x)  # E: Revealed type is 'builtins.int'
reveal_type(D().y)  # E: Revealed type is 'builtins.float'
reveal_type(D().z)  # E: Revealed type is 'builtins.int'
[out]

[case testFinalDefiningInstanceVarImplicit]
from typing import Final, Tuple, Any

class C:
    def __init__(self, x: Tuple[int, Any]) -> None:
        self.x: Final = x
        self.y: Final[float] = 1
reveal_type(C((1, 2)).x)  # E: Revealed type is 'Tuple[builtins.int, Any]'
reveal_type(C((1, 2)).y)  # E: Revealed type is 'builtins.float'
[out]

[case testFinalBadDefinitionTooManyArgs]
from typing import Final

x: Final[int, str]  # E: Final names outside stubs must have a value \
                    # E: Final[...] takes at most one type argument
reveal_type(x)  # E: Revealed type is 'builtins.int'

class C:
    def __init__(self) -> None:
        self.x: Final[float, float] = 1  # E: Final[...] takes at most one type argument
reveal_type(C().x)  # E: Revealed type is 'builtins.float'
[out]

[case testFinalInvalidDefinitions]
from typing import Final, Any

x = y = 1  # type: Final[float]  # E: Invalid final declaration, ignoring
z: Any
z[0]: Final  # E: Unexpected type declaration \
             # E: Invalid final declaration, ignoring
[out]

[case testFinalDefiningInstanceVarStubs]
# Allow skipping r.h.s.
import mod
[file mod.pyi]
from typing import Final

x: Final
y: Final[int]
class C:
    x: Final
    y: Final[int]
    def __init__(self) -> None:
        self.z: Final
[out]

[case testFinalDefiningFunc]
from typing import final

@final  # E: @final can't be used with non-method functions
def f(x: int) -> None: ...
[out]

[case testFinalDefiningFuncOverloaded]
from typing import final, overload

@overload
def f(x: int) -> int: ...
@overload
def f(x: str) -> str: ...
@final  # E: @final can't be used with non-method functions
def f(x):
    pass
[out]

[case testFinalDefiningMeth]
from typing import final

class C:
    @final
    def f(self, x: int) -> None: ...
reveal_type(C().f)  # E: Revealed type is 'def (x: builtins.int)'
[out]

[case testFinalDefiningMethOverloaded]
from typing import final, overload

class C:
    @overload
    def f(self, x: int) -> int: ...
    @overload
    def f(self, x: str) -> str: ...
    @final
    def f(self, x):
        pass

reveal_type(C().f)  # E: Revealed type is 'Overload(def (x: builtins.int) -> builtins.int, def (x: builtins.str) -> builtins.str)'
[out]

[case testFinalDefiningMethOverloadedStubs]
from mod import C

reveal_type(C().f)  # E: Revealed type is 'Overload(def (x: builtins.int) -> builtins.int, def (x: builtins.str) -> builtins.str)'
[file mod.pyi]
from typing import final, overload

class C:
    @final
    @overload
    def f(self, x: int) -> int: ...
    @overload
    def f(self, x: str) -> str: ...
[out]

[case testFinalDefiningProperty]
from typing import final

class C:
    @final
    @property
    def f(self) -> int: pass
reveal_type(C().f)  # E: Revealed type is 'builtins.int'
[builtins fixtures/property.pyi]
[out]

[case testFinalDefiningOuterOnly]
from typing import Final, Callable, Tuple, Any
x: Tuple[Final]  # E: Final can be only used as an outermost type qualifier in assignments
y: Callable[[], Tuple[Final[int]]]  # E: Final can be only used as an outermost type qualifier in assignments
[out]

[case testFinalDefiningNotInMethod]
from typing import Final

def f(x: Final[int]) -> int: ...  # E: Final can be only used as an outermost type qualifier in assignments
def g(x: int) -> Final[int]: ...  # E: Final can be only used as an outermost type qualifier in assignments
[out]

[case testFinalDefiningNoRhs]
from typing import Final
x: Final  # E: Final names outside stubs must have a value
y: Final[int]  # E: Final names outside stubs must have a value
class C:
    x: Final  # E: Final names outside stubs must have a value
    y: Final[int]  # E: Final names outside stubs must have a value
    def __init__(self) -> None:
        self.z: Final  # E: Final names outside stubs must have a value
reveal_type(x)  # E: Revealed type is 'Any'
reveal_type(y)  # E: Revealed type is 'builtins.int'
reveal_type(C().x)  # E: Revealed type is 'Any'
reveal_type(C().y)  # E: Revealed type is 'builtins.int'
reveal_type(C().z)  # E: Revealed type is 'Any'
[out]

[case testFinalDefiningNoTypevarsExplicit]
from typing import Final, TypeVar, Generic, Tuple, Any

T = TypeVar('T')
d: Any

class C(Generic[T]):
    x: Final[Tuple[T, T]] = d  # E: Constant declared in class body can't depend on type variables
[out]

[case testFinalDefiningTypevarsImplicit]
from typing import Final, TypeVar, Generic, Tuple, Any

T = TypeVar('T')

class C(Generic[T]):
    def __init__(self, x: Tuple[T, T]) -> None:
        self.x: Final = x
        self.y: Final = 1

reveal_type(C((1, 2)).x)  # E: Revealed type is 'Tuple[builtins.int*, builtins.int*]'
C.x  # E: Can't access instance constant on class object \
     # E: Access to generic instance variables via class is ambiguous
C.y  # E: Can't access instance constant on class object
[out]

[case testFinalDefiningNotInOtherMethod]
from typing import Final, Any, Tuple

class C:
    def meth(self, x: Tuple[int, Any]) -> None:
        self.x: Final = x  # E: Can only declare final attributes in class body or __init__ method
        self.y: Final[float] = 1  # E: Can only declare final attributes in class body or __init__ method
[out]

[case testFinalDefiningOnlyOnSelf]
from typing import Final, Any, Tuple

class U:
    x: Any
    y: Any
class C:
    def __init__(self, x: Tuple[int, Any]) -> None:
        slf = U()
        slf.x: Final = x  # E: Final can be only applied to a name or an attribute on self
        slf.y: Final[float] = 1  # E: Type cannot be declared in assignment to non-self attribute \
                                 # E: Final can be only applied to a name or an attribute on self
[out]

[case testFinalNotInProtocol]
from typing import Final, final, Protocol, overload

class P(Protocol):
    x: Final[float] = 1  # E: Protocol members can't be final
    @final  # E: Protocol members can't be final
    def meth(self, x) -> int:
        pass
    @overload
    def other(self, x: int) -> int: ...
    @overload
    def other(self, x: str) -> str: ...
    @final  # E: Protocol members can't be final
    def other(self, x):
        pass
[out]

[case testFinalNotInLoops]
from typing import Final

for i in [1, 2, 3]:
    x: Final = i  # E: Final declarations are prohibited within loops

while True:
    y: Final = True  # E: Final declarations are prohibited within loops
[builtins fixtures/list.pyi]
[out]

[case testFinalDelayedDefinition]
from typing import Final

class C:
    x: Final[int]  # OK, defined in __init__
    bad: Final[int]  # E: Final names outside stubs must have a value

    def __init__(self, x: int) -> None:
        self.x = x  # OK, deferred definition
        self.x = 2  # E: Can't assign to final attribute "x"

    def meth(self) -> None:
        self.x = 2  # E: Can't assign to final attribute "x"

c: C
c.x = 3  # E: Can't assign to final attribute "x"
class D(C):
    x = 4  # E: Can't assign to constant "x"
d: D
d.x = 5  # E: Can't assign to final attribute "x"
[out]

-- Reassignments

[case testFinalReassignModuleVar]
from typing import Final

x: Final = 1
x = 2  # E: Can't assign to constant "x"
def f() -> int:
    global x
    x = 3  # E: Can't assign to constant "x"
    return x

y = 1
y: Final = 2  # E: Name 'y' already defined on line 10 \
              # E: Final can't redefine an existing name, ignoring
y = 3  # No error here, first definition wins

z: Final = 1
z: Final = 2  # E: Name 'z' already defined on line 14 \
              # E: Final can't redefine an existing name, ignoring \
              # E: Can't assign to constant "z"
z = 3  # E: Can't assign to constant "z"
[out]

[case testFinalReassignModuleReexport]
from typing import Final

from lib import X
from lib.mod import ID

X = 1  # E: Can't assign to constant "X"
ID: Final = 1  # E: Name 'ID' already defined (possibly by an import) \
               # E: Final can't redefine an existing name, ignoring \
               # E: Can't assign to constant "ID"
ID = 1  # E: Can't assign to constant "ID"
[file lib/__init__.pyi]
from lib.const import X as X

[file lib/mod.pyi]
from lib.const import *

[file lib/const.pyi]
from typing import Final

ID: Final
X: Final[int]
[out]

[case testFinalReassignFuncScope]
from typing import Final

def f() -> None:
    nl: Final = 0
    x: Final = 1
    x = 1  # E: Can't assign to constant "x"

    y: Final = 1
    y: Final = 2  # E: Final can't redefine an existing name, ignoring \
                  # E: Can't assign to constant "y"
    def nested() -> None:
        nonlocal nl
        nl = 1  # E: Can't assign to constant "nl"
[out]

[case testFinalReassignModuleVarExternal]
import mod
mod.x = 2  # E: Can't assign to constant "x"
[file mod.pyi]
from typing import Final
x: Final[int]
[out]

[case testFinalReassignInstanceVarClassBody]
from typing import Final

class C:
    x: Final = 1
    x = 2  # E: Can't assign to constant "x"

    y = 1
    y: Final = 2  # E: Final can't redefine an existing name, ignoring
[out]

[case testFinalReassignInstanceVarInit]
from typing import Final

class C:
    def __init__(self) -> None:
        self.x: Final = 1
        self.y = 1
        self.y: Final = 2  # E: Final can't redefine an existing name, ignoring
    def meth(self) -> None:
        self.x = 2  # E: Can't assign to final attribute "x"
[out]

[case testFinalReassignInstanceVarClassVsInit]
from typing import Final

class C:
    y: Final = 1
    def __init__(self) -> None:
        self.x: Final = 1
        self.y = 2  # E: Can't assign to final attribute "y"
    x = 2  # E: Can't assign to constant "x"
[out]

[case testFinalReassignInstanceVarMethod]
from typing import Final

class C:
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
    def meth(self) -> None:
        self.x = 2  # E: Can't assign to final attribute "x"
        self.y = 2  # E: Can't assign to final attribute "y"
    def other(self) -> None:
        self.x = 2  # E: Can't assign to final attribute "x"
        self.y = 2  # E: Can't assign to final attribute "y"
    @classmethod
    def cm(cls) -> None:
        cls.x = 2  # E: Can't assign to final attribute "x"
        cls.y  # E: Can't access instance constant on class object
[builtins fixtures/classmethod.pyi]
[out]

[case testFinalReassignInstanceVarExternalClass]
from typing import Final

class C:
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1

class D(C): pass

C.x = 2  # E: Can't assign to final attribute "x"
D.x = 2  # E: Can't assign to final attribute "x"
D.y = 2  # E: Can't access instance constant on class object \
         # E: Can't assign to final attribute "y"
[out]

[case testFinalReassignInstanceVarExternalInstance]
from typing import Final

class C:
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1

class D(C): pass

C().x = 2  # E: Can't assign to final attribute "x"
D().x = 2  # E: Can't assign to final attribute "x"
D().y = 2  # E: Can't assign to final attribute "y"
[out]

[case testFinalWorksWithComplexTargets]
from typing import Final, Any

y: Final[Any] = 1
x = a, (b, y), c = 2, (2, 2), 2  # E: Can't assign to constant "y"
t, *y, s = u = [2, 2, 2]  # E: Can't assign to constant "y"
[builtins fixtures/list.pyi]
[out]

[case testFinalInplaceAssign]
from typing import Final

class A:  # no such things in fixtures
    def __add__(self, other: A) -> A: ...
class B:
    def __add__(self, other: B) -> B: ...
    def __iadd__(self, other: B) -> B: ...

a: Final = A()
b: Final = B()
class C:
    a: Final = A()
    b: Final = B()
class D(C):
    pass

a += A()  # E: Can't assign to constant "a"
b += B()  # E: Can't assign to constant "b"
D().a += A()  # E: Can't assign to final attribute "a"
D().b += B()  # E: Can't assign to final attribute "b"
[out]

-- Overriding

[case testFinalOverridingVarClassBody]
from typing import Final

# We use properties in this tests and below because we want to check
# that any existing variable before final doesn't affect logic of
# subsequent overrides but writable attributes can't be overridden by final.
class A:
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...

class B(A):
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
class C(B):
    x: int = 2  # E: Can't assign to constant "x"
    y: int = 2  # E: Can't assign to constant "y"
    x = 3  # E: Can't assign to constant "x"
    y = 3  # E: Can't assign to constant "y"
class D(C):
    pass
D.x = 4  # E: Can't assign to final attribute "x"
D.y = 4  # E: Can't assign to final attribute "y"
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarClassBodyExplicit]
from typing import Final

class A:
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...
class B(A):
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
class C(B):
    x: Final = 2  # E: Cannot override final attribute "x" (previously declared on base class "B")
    y: Final = 2  # E: Cannot override final attribute "y" (previously declared on base class "B")
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarInit]
from typing import Final

class A:
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...
class B(A):
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
class C(B):
    def __init__(self) -> None:
        self.x = 2  # E: Can't assign to final attribute "x"
        self.y = 2  # E: Can't assign to final attribute "y"
    def meth(self) -> None:
        self.x = 3  # E: Can't assign to final attribute "x"
        self.y = 3  # E: Can't assign to final attribute "y"
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarInit2]
from typing import Final

class A:
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...
class B(A):
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
class C(B):
    def __init__(self) -> None:
        self.x: Final = 2  # E: Cannot override final attribute "x" (previously declared on base class "B")
        self.y: Final = 2  # E: Cannot override final attribute "y" (previously declared on base class "B")
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarOtherMethod]
from typing import Final

class A:
    @property
    def x(self) -> int: ...
    @property
    def y(self) -> int: ...
class B(A):
    x: Final = 1
    def __init__(self) -> None:
        self.y: Final = 1
class C(B):
    def meth(self) -> None:
        self.x: int = 2    # E: Can't assign to final attribute "x"
        self.y: int = 2    # E: Can't assign to final attribute "y"

        self.x = 3  # E: Can't assign to final attribute "x"
        self.y = 3  # E: Can't assign to final attribute "y"
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarMultipleInheritanceClass]
from typing import Final, Any

class A:
    x: Final[Any] = 1
class B:
    @property
    def x(self) -> int: ...
class C(A, B): ...
class D(B, A): ...  # E: Cannot override final attribute "x" (previously declared on base class "A")
C.x = 3  # E: Can't assign to final attribute "x"
C().x = 4  # E: Can't assign to final attribute "x"
D().x = 4  # E: Can't assign to final attribute "x" \
           # E: Property "x" defined in "B" is read-only
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarMultipleInheritanceInit]
from typing import Final, Any

class A:
    def __init__(self) -> None:
        self.x: Final[Any] = 1
class B:
    @property
    def x(self) -> int: ...
class C(A, B): ...
class D(B, A): ...  # E: Cannot override final attribute "x" (previously declared on base class "A")
C.x = 3  # E: Can't access instance constant on class object \
         # E: Can't assign to final attribute "x"
C().x = 4  # E: Can't assign to final attribute "x"
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarMultipleInheritanceMixed]
from typing import Final

class A:
    x: Final = 1
class B:
    def __init__(self) -> None:
        self.x = 2
class C(A, B): ...  # E: Can't override writeable attribute "x" with a final one
class D(B, A): ...  # E: Cannot override final attribute "x" (previously declared on base class "A")
C.x = 3  # E: Can't assign to final attribute "x"
D.x = 3  # E: Can't assign to final attribute "x"
C().x = 4  # E: Can't assign to final attribute "x"
D().x = 4  # E: Can't assign to final attribute "x"
[out]

[case testFinalOverridingVarWithMethod]
from typing import Final, Any

class A:
    x: Final[Any] = 1
    def __init__(self) -> None:
        self.y: Final[Any] = 1

class B(A):
    def x(self) -> None: pass  # E: Cannot override final attribute "x" (previously declared on base class "A")
    def y(self) -> None: pass  # E: Cannot override final attribute "y" (previously declared on base class "A")

class C(A):
    @property  # E: Cannot override final attribute "x" (previously declared on base class "A")
    def x(self) -> None: pass
    @property  # E: Cannot override final attribute "y" (previously declared on base class "A")
    def y(self) -> None: pass
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingVarWithMethodClass]
from typing import Final, Any

class A:
    x: Final[Any] = 1
    def __init__(self) -> None:
        self.y: Final[Any] = 1

class B(A):
    @classmethod  # E: Cannot override final attribute "x" (previously declared on base class "A")
    def x(self) -> None: pass
    @classmethod  # E: Cannot override final attribute "y" (previously declared on base class "A")
    def y(self) -> None: pass

[builtins fixtures/classmethod.pyi]
[out]

[case testFinalOverridingMethodWithVar]
from typing import final, Final, Any

a: Any

class A:
    @final
    def f(self) -> None: pass
    @final
    @property
    def p(self) -> int: pass

class B(A):
    f = a  # E: Cannot override final attribute "f" (previously declared on base class "A")
    p = a  # E: Cannot override final attribute "p" (previously declared on base class "A")
class C(A):
    f: Any  # E: Cannot override final attribute "f" (previously declared on base class "A")
    p: Any  # E: Cannot override final attribute "p" (previously declared on base class "A")
class D(A):
    f: Final = a  # E: Cannot override final attribute "f" (previously declared on base class "A")
    p: Final = a  # E: Cannot override final attribute "p" (previously declared on base class "A")
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingMethodWithVarImplicit]
from typing import final, Any, Final

a: Any

class A:
    @final
    def f(self) -> None: pass
    @final
    @classmethod
    def c(cls) -> int: pass

class B(A):
    def __init__(self) -> None:
        self.f: Any  # E: Can't assign to final attribute "f" \
                     # E: Cannot override final attribute "f" (previously declared on base class "A")
        self.c: Any  # E: Can't assign to final attribute "c" \
                     # E: Cannot override final attribute "c" (previously declared on base class "A")

B().f = a  # E: Can't assign to final attribute "f"
B().c = a  # E: Can't assign to final attribute "c"

class C(A):
    def __init__(self) -> None:
        self.f: Final = a  # E: Cannot override final attribute "f" (previously declared on base class "A")
        self.c: Final = a  # E: Cannot override final attribute "c" (previously declared on base class "A")
[builtins fixtures/classmethod.pyi]
[out]

[case testFinalCanOverrideMethodWithFinal]
from typing import final

class B:
    def meth(self) -> None: ...
class C(B):
    @final  # OK
    def meth(self) -> None: ...
[out]

[case testFinalOverridingMethodMultipleInheritance]
from typing import final

class A:
    def m(self) -> int: pass
class B:
    @final
    def m(self) -> int: pass

class C(A, B): pass  # E: Cannot override final attribute "m" (previously declared on base class "B")
class D(B, A): pass
[out]

[case testFinalOverridingMethodMultipleInheritanceVar]
from typing import final, Any

class A:
    m: Any
class B:
    @final
    def m(self) -> int: pass

class C(A, B): pass  # E: Cannot override final attribute "m" (previously declared on base class "B")
class D(B, A): pass  # E: Can't override writeable attribute "m" with a final one
[out]

[case testFinalOverridingClassMethod]
from typing import final

class B:
    @classmethod
    @final
    def f(cls) -> int: pass

class C(B):
    @classmethod  # E: Cannot override final attribute "f" (previously declared on base class "B")
    def f(cls) -> int: pass
[builtins fixtures/classmethod.pyi]
[out]

[case testFinalOverridingStaticMethod]
from typing import final

class B:
    @staticmethod
    @final
    def f() -> int: pass

class C(B):
    @staticmethod  # E: Cannot override final attribute "f" (previously declared on base class "B")
    def f() -> int: pass
[builtins fixtures/staticmethod.pyi]
[out]

[case testFinalOverridingProperty]
from typing import final

class B:
    @final
    @property
    def f(self) -> int: pass

class C(B):
    @property  # E: Cannot override final attribute "f" (previously declared on base class "B")
    def f(self) -> int: pass
[builtins fixtures/property.pyi]
[out]

[case testFinalOverridingMethodOverloads]
from typing import final, overload

class B:
    @overload
    def f(self, x: int) -> int: ...
    @overload
    def f(self, x: str) -> str: ...
    @final
    def f(self, x):
        pass

class C(B):
    @overload  # E: Cannot override final attribute "f" (previously declared on base class "B")
    def f(self, x: int) -> int: ...
    @overload
    def f(self, x: str) -> str: ...
    def f(self, x):
        pass
[out]

[case testFinalClassNoInheritance]
from typing import final

@final
class B: ...
class C(B):  # E: Can't inherit from final class "B"
    pass
class D(C):  # E: Can't inherit from final class "B"
    pass
[out]

[case testFinalClassNoInheritanceMulti]
from typing import final

class A: ...
@final
class B: ...
class C(B, A):  # E: Can't inherit from final class "B"
    pass
class D(A, B):  # E: Can't inherit from final class "B"
    pass
[out]

[case testFinalCantOverrideWriteable]
from typing import Any, Final, final

class B:
    x: Any
    @property
    def y(self) -> Any: ...
    @y.setter
    def y(self, x: Any) -> None: ...

class C(B):
    x: Final = 1  # E: Can't override writeable attribute "x" with a final one
    y: Final = 1  # E: Can't override writeable attribute "y" with a final one

class D(B):
    @final  # E: Can't override writeable attribute "x" with a final one
    def x(self) -> int: ...
    @final  # E: Can't override writeable attribute "y" with a final one
    def y(self) -> int: ...
[builtins fixtures/property.pyi]
[out]

[case testFinalCanUseTypingExtensions]
from typing_extensions import final, Final

x: Final = 1
x = 2  # E: Can't assign to constant "x"

class S:
    x: Final = 1
S.x = 2  # E: Can't assign to final attribute "x"

class B:
    @final
    def meth(self) -> None: ...
class C(B):
    def meth(self) -> None: ...  # E: Cannot override final attribute "meth" (previously declared on base class "B")

@final
class F: ...
class E(F): ...  # E: Can't inherit from final class "F"
[out]
