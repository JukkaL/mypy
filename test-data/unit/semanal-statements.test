[case testReturn]
def f(x): return x
def g(): return
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(x))
    Block:1(
      Return:1(
        NameExpr(x [l]))))
  FuncDef:2(
    g
    Block:2(
      Return:2())))

[case testRaise]
raise object()
[out]
MypyFile:1(
  Raise:1(
    CallExpr:1(
      NameExpr(object [builtins.object])
      Args())))

[case testYield]
def f(): yield f
[out]
MypyFile:1(
  FuncDef:1(
    f
    Generator
    Block:1(
      ExpressionStatement:1(
        YieldExpr:1(
          NameExpr(f [__main__.f]))))))

[case testAssert]
assert object
[out]
MypyFile:1(
  Assert:1(
    NameExpr(object [builtins.object])))

[case testOperatorAssignment]
x = y = 1
x += y
y |= x
[out]
MypyFile:1(
  Assignment:1(
    Lvalues(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  OperatorAssignment:2(
    +
    NameExpr(x [__main__.x])
    NameExpr(y [__main__.y]))
  OperatorAssignment:3(
    |
    NameExpr(y [__main__.y])
    NameExpr(x [__main__.x])))

[case testWhile]
x = y = 1
while x:
  y
[out]
MypyFile:1(
  Assignment:1(
    Lvalues(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  While:2(
    NameExpr(x [__main__.x])
    Block:2(
      ExpressionStatement:3(
        NameExpr(y [__main__.y])))))

[case testFor]
for x in object:
  x
[out]
MypyFile:1(
  For:1(
    NameExpr(x* [__main__.x])
    NameExpr(object [builtins.object])
    Block:1(
      ExpressionStatement:2(
        NameExpr(x [__main__.x])))))

[case testForInFunction]
def f():
  for x in f:
    x
[out]
MypyFile:1(
  FuncDef:1(
    f
    Block:1(
      For:2(
        NameExpr(x* [l])
        NameExpr(f [__main__.f])
        Block:2(
          ExpressionStatement:3(
            NameExpr(x [l])))))))

[case testMultipleForIndexVars]
for x, y in []:
  x, y
[out]
MypyFile:1(
  For:1(
    TupleExpr:1(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    ListExpr:1()
    Block:1(
      ExpressionStatement:2(
        TupleExpr:2(
          NameExpr(x [__main__.x])
          NameExpr(y [__main__.y]))))))

[case testForIndexVarScope]
for x in []:
  pass
x
[out]
MypyFile:1(
  For:1(
    NameExpr(x* [__main__.x])
    ListExpr:1()
    Block:1(
      Pass:2()))
  ExpressionStatement:3(
    NameExpr(x [__main__.x])))

[case testForIndexVarScope2]
def f():
  for x in []:
    pass
  x
[out]
MypyFile:1(
  FuncDef:1(
    f
    Block:1(
      For:2(
        NameExpr(x* [l])
        ListExpr:2()
        Block:2(
          Pass:3()))
      ExpressionStatement:4(
        NameExpr(x [l])))))

[case testReusingForLoopIndexVariable]
for x in None:
    pass
for x in None:
    pass
[out]
MypyFile:1(
  For:1(
    NameExpr(x* [__main__.x])
    NameExpr(None [builtins.None])
    Block:1(
      Pass:2()))
  For:3(
    NameExpr(x [__main__.x])
    NameExpr(None [builtins.None])
    Block:3(
      Pass:4())))

[case testReusingForLoopIndexVariable2]
def f():
    for x in None:
        pass
    for x in None:
        pass
[out]
MypyFile:1(
  FuncDef:1(
    f
    Block:1(
      For:2(
        NameExpr(x* [l])
        NameExpr(None [builtins.None])
        Block:2(
          Pass:3()))
      For:4(
        NameExpr(x [l])
        NameExpr(None [builtins.None])
        Block:4(
          Pass:5())))))

[case testLoopWithElse]
for x in []:
  pass
else:
  x
while 1:
  pass
else:
  x
[out]
MypyFile:1(
  For:1(
    NameExpr(x* [__main__.x])
    ListExpr:1()
    Block:1(
      Pass:2())
    Else(
      ExpressionStatement:4(
        NameExpr(x [__main__.x]))))
  While:5(
    IntExpr(1)
    Block:5(
      Pass:6())
    Else(
      ExpressionStatement:8(
        NameExpr(x [__main__.x])))))

[case testBreak]
while 1:
  break
for x in []:
  break
[out]
MypyFile:1(
  While:1(
    IntExpr(1)
    Block:1(
      Break:2()))
  For:3(
    NameExpr(x* [__main__.x])
    ListExpr:3()
    Block:3(
      Break:4())))

[case testContinue]
while 1:
  continue
for x in []:
  continue
[out]
MypyFile:1(
  While:1(
    IntExpr(1)
    Block:1(
      Continue:2()))
  For:3(
    NameExpr(x* [__main__.x])
    ListExpr:3()
    Block:3(
      Continue:4())))

[case testIf]
x = 1
if x:
  x
elif x:
  x
elif x:
  x
else:
  x
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  If:2(
    If(
      NameExpr(x [__main__.x]))
    Then(
      ExpressionStatement:3(
        NameExpr(x [__main__.x])))
    If(
      NameExpr(x [__main__.x]))
    Then(
      ExpressionStatement:5(
        NameExpr(x [__main__.x])))
    If(
      NameExpr(x [__main__.x]))
    Then(
      ExpressionStatement:7(
        NameExpr(x [__main__.x])))
    Else(
      ExpressionStatement:9(
        NameExpr(x [__main__.x])))))

[case testSimpleIf]
if object:
  object
[out]
MypyFile:1(
  If:1(
    If(
      NameExpr(object [builtins.object]))
    Then(
      ExpressionStatement:2(
        NameExpr(object [builtins.object])))))

[case testLvalues]
x = y = 1
x = 1
x.m = 1
x[y] = 1
x, y = 1
[x, y] = 1
(x, y) = 1
[out]
MypyFile:1(
  Assignment:1(
    Lvalues(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  Assignment:2(
    NameExpr(x [__main__.x])
    IntExpr(1))
  Assignment:3(
    MemberExpr:3(
      NameExpr(x [__main__.x])
      m)
    IntExpr(1))
  Assignment:4(
    IndexExpr:4(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))
    IntExpr(1))
  Assignment:5(
    TupleExpr:5(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))
    IntExpr(1))
  Assignment:6(
    ListExpr:6(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))
    IntExpr(1))
  Assignment:7(
    TupleExpr:7(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))
    IntExpr(1)))

[case testStarLvalues]
*x, y = 1
*x, (y, *z) = 1
*(x, q), r = 1
[out]
MypyFile:1(
  Assignment:1(
    TupleExpr:1(
      StarExpr:1(
        NameExpr(x* [__main__.x]))
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  Assignment:2(
    TupleExpr:2(
      StarExpr:2(
        NameExpr(x [__main__.x]))
      TupleExpr:2(
        NameExpr(y [__main__.y])
        StarExpr:2(
          NameExpr(z* [__main__.z]))))
    IntExpr(1))
  Assignment:3(
    TupleExpr:3(
      StarExpr:3(
        TupleExpr:3(
          NameExpr(x [__main__.x])
          NameExpr(q* [__main__.q])))
      NameExpr(r* [__main__.r]))
    IntExpr(1)))

[case testMultipleDefinition]
x, y = 1
x, y = 2
[out]
MypyFile:1(
  Assignment:1(
    TupleExpr:1(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  Assignment:2(
    TupleExpr:2(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))
    IntExpr(2)))

[case testComplexDefinitions]
(x) = 1
([y]) = 2
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  Assignment:2(
    ListExpr:2(
      NameExpr(y* [__main__.y]))
    IntExpr(2)))

[case testLocalComplexDefinition]
def f():
  (x) = 1
  x
[out]
MypyFile:1(
  FuncDef:1(
    f
    Block:1(
      Assignment:2(
        NameExpr(x* [l])
        IntExpr(1))
      ExpressionStatement:3(
        NameExpr(x [l])))))

[case testMultipleDefOnlySomeNew]
x = 1
y, x = 1
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  Assignment:2(
    TupleExpr:2(
      NameExpr(y* [__main__.y])
      NameExpr(x [__main__.x]))
    IntExpr(1)))

[case testMultipleDefOnlySomeNewNestedTuples]
x = 1
y, (x, z) = 1
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  Assignment:2(
    TupleExpr:2(
      NameExpr(y* [__main__.y])
      TupleExpr:2(
        NameExpr(x [__main__.x])
        NameExpr(z* [__main__.z])))
    IntExpr(1)))

[case testMultipleDefOnlySomeNewNestedLists]
x = 1
y, [x, z] = 1
[p, [x, r]] = 1
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  Assignment:2(
    TupleExpr:2(
      NameExpr(y* [__main__.y])
      ListExpr:2(
        NameExpr(x [__main__.x])
        NameExpr(z* [__main__.z])))
    IntExpr(1))
  Assignment:3(
    ListExpr:3(
      NameExpr(p* [__main__.p])
      ListExpr:3(
        NameExpr(x [__main__.x])
        NameExpr(r* [__main__.r])))
    IntExpr(1)))

[case testIndexedDel]
x = y = 1
del x[y]
[out]
MypyFile:1(
  Assignment:1(
    Lvalues(
      NameExpr(x* [__main__.x])
      NameExpr(y* [__main__.y]))
    IntExpr(1))
  Del:2(
    IndexExpr:2(
      NameExpr(x [__main__.x])
      NameExpr(y [__main__.y]))))

[case testDelGlobalName]
x = 1
del x
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(x* [__main__.x])
    IntExpr(1))
  Del:2(
    NameExpr(x [__main__.x])))

[case testDelLocalName]
def f(x):
    del x
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(x))
    Block:1(
      Del:2(
        NameExpr(x [l])))))

[case testDelMultipleThings]
def f(x, y):
    del x, y[0]
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(x)
      Var(y))
    Block:1(
      Del:2(
        TupleExpr:2(
          NameExpr(x [l])
          IndexExpr:2(
            NameExpr(y [l])
            IntExpr(0)))))))

[case testDelMultipleThingsInvalid]
def f(x, y) -> None:
    del x, y + 1
[out]
main: note: In function "f":
main:2: error: Invalid delete target

[case testTry]
class c: pass
try:
  c
except object:
  c
except c as e:
  e
except:
  c
finally:
  c
[out]
MypyFile:1(
  ClassDef:1(
    c
    Pass:1())
  Try:2(
    Block:2(
      ExpressionStatement:3(
        NameExpr(c [__main__.c])))
    NameExpr(object [builtins.object])
    Block:4(
      ExpressionStatement:5(
        NameExpr(c [__main__.c])))
    NameExpr(c [__main__.c])
    NameExpr(e* [__main__.e])
    Block:6(
      ExpressionStatement:7(
        NameExpr(e [__main__.e])))
    Block:8(
      ExpressionStatement:9(
        NameExpr(c [__main__.c])))
    Finally(
      ExpressionStatement:11(
        NameExpr(c [__main__.c])))))

[case testTryElse]
try:
  pass
except:
  pass
else:
  object
[out]
MypyFile:1(
  Try:1(
    Block:1(
      Pass:2())
    Block:3(
      Pass:4())
    Else(
      ExpressionStatement:6(
        NameExpr(object [builtins.object])))))

[case testTryWithOnlyFinally]
try:
  pass
finally:
  pass
[out]
MypyFile:1(
  Try:1(
    Block:1(
      Pass:2())
    Finally(
      Pass:4())))

[case testExceptWithMultipleTypes]
class c: pass
try:
  pass
except (c, object) as e:
  e
[out]
MypyFile:1(
  ClassDef:1(
    c
    Pass:1())
  Try:2(
    Block:2(
      Pass:3())
    TupleExpr:4(
      NameExpr(c [__main__.c])
      NameExpr(object [builtins.object]))
    NameExpr(e* [__main__.e])
    Block:4(
      ExpressionStatement:5(
        NameExpr(e [__main__.e])))))

[case testRaiseWithoutExpr]
raise
[out]
MypyFile:1(
  Raise:1())

[case testWith]
with object:
  object
[out]
MypyFile:1(
  With:1(
    Expr(
      NameExpr(object [builtins.object]))
    Block:1(
      ExpressionStatement:2(
        NameExpr(object [builtins.object])))))

[case testWithAndVariable]
with object as x:
  x
[out]
MypyFile:1(
  With:1(
    Expr(
      NameExpr(object [builtins.object]))
    Target(
      NameExpr(x* [__main__.x]))
    Block:1(
      ExpressionStatement:2(
        NameExpr(x [__main__.x])))))

[case testWithInFunction]
def f():
  with f as x:
    x
[out]
MypyFile:1(
  FuncDef:1(
    f
    Block:1(
      With:2(
        Expr(
          NameExpr(f [__main__.f]))
        Target(
          NameExpr(x* [l]))
        Block:2(
          ExpressionStatement:3(
            NameExpr(x [l])))))))

[case testComplexWith]
with object, object:
  pass
with object as a, object as b:
  pass
[out]
MypyFile:1(
  With:1(
    Expr(
      NameExpr(object [builtins.object]))
    Expr(
      NameExpr(object [builtins.object]))
    Block:1(
      Pass:2()))
  With:3(
    Expr(
      NameExpr(object [builtins.object]))
    Target(
      NameExpr(a* [__main__.a]))
    Expr(
      NameExpr(object [builtins.object]))
    Target(
      NameExpr(b* [__main__.b]))
    Block:3(
      Pass:4())))

[case testVariableInBlock]
while object:
  x = None
  x = x
[out]
MypyFile:1(
  While:1(
    NameExpr(object [builtins.object])
    Block:1(
      Assignment:2(
        NameExpr(x* [__main__.x])
        NameExpr(None [builtins.None]))
      Assignment:3(
        NameExpr(x [__main__.x])
        NameExpr(x [__main__.x])))))

[case testVariableInExceptHandler]
try:
  pass
except object as o:
  x = None
  o = x
[out]
MypyFile:1(
  Try:1(
    Block:1(
      Pass:2())
    NameExpr(object [builtins.object])
    NameExpr(o* [__main__.o])
    Block:3(
      Assignment:4(
        NameExpr(x* [__main__.x])
        NameExpr(None [builtins.None]))
      Assignment:5(
        NameExpr(o [__main__.o])
        NameExpr(x [__main__.x])))))

[case testCallInExceptHandler]
try:
  pass
except object as o:
  o = object()
[out]
MypyFile:1(
  Try:1(
    Block:1(
      Pass:2())
    NameExpr(object [builtins.object])
    NameExpr(o* [__main__.o])
    Block:3(
      Assignment:4(
        NameExpr(o [__main__.o])
        CallExpr:4(
          NameExpr(object [builtins.object])
          Args())))))

[case testTryExceptWithMultipleHandlers]
try:
    pass
except BaseException as e:
    pass
except Err as f:
    f = BaseException() # Fail
    f = Err()
class Err(BaseException): pass
[builtins fixtures/exception.pyi]
[out]
MypyFile:1(
  Try:1(
    Block:1(
      Pass:2())
    NameExpr(BaseException [builtins.BaseException])
    NameExpr(e* [__main__.e])
    Block:3(
      Pass:4())
    NameExpr(Err [__main__.Err])
    NameExpr(f* [__main__.f])
    Block:5(
      Assignment:6(
        NameExpr(f [__main__.f])
        CallExpr:6(
          NameExpr(BaseException [builtins.BaseException])
          Args()))
      Assignment:7(
        NameExpr(f [__main__.f])
        CallExpr:7(
          NameExpr(Err [__main__.Err])
          Args()))))
  ClassDef:8(
    Err
    BaseType(
      builtins.BaseException)
    Pass:8()))

[case testMultipleAssignmentWithPartialNewDef]
o = None
x, o = o, o
[out]
MypyFile:1(
  Assignment:1(
    NameExpr(o* [__main__.o])
    NameExpr(None [builtins.None]))
  Assignment:2(
    TupleExpr:2(
      NameExpr(x* [__main__.x])
      NameExpr(o [__main__.o]))
    TupleExpr:2(
      NameExpr(o [__main__.o])
      NameExpr(o [__main__.o]))))

[case testFunctionDecorator]
def decorate(f): pass
@decorate
def g():
    g()
[out]
MypyFile:1(
  FuncDef:1(
    decorate
    Args(
      Var(f))
    Block:1(
      Pass:1()))
  Decorator:2(
    Var(g)
    NameExpr(decorate [__main__.decorate])
    FuncDef:3(
      g
      Block:3(
        ExpressionStatement:4(
          CallExpr:4(
            NameExpr(g [__main__.g])
            Args()))))))

[case testTryWithinFunction]
def f() -> None:
    try:
        pass
    except object as o:
        pass
[out]
MypyFile:1(
  FuncDef:1(
    f
    def ()
    Block:1(
      Try:2(
        Block:2(
          Pass:3())
        NameExpr(object [builtins.object])
        NameExpr(o* [l])
        Block:4(
          Pass:5())))))

[case testReuseExceptionVariable]
def f() -> None:
    try:
        pass
    except object as o:
        pass
    except object as o:
        pass
[out]
MypyFile:1(
  FuncDef:1(
    f
    def ()
    Block:1(
      Try:2(
        Block:2(
          Pass:3())
        NameExpr(object [builtins.object])
        NameExpr(o* [l])
        Block:4(
          Pass:5())
        NameExpr(object [builtins.object])
        NameExpr(o [l])
        Block:6(
          Pass:7())))))

[case testWithMultiple]
def f(a):
    pass
def main():
    with f(0) as a, f(a) as b:
        x = a, b
[out]
MypyFile:1(
  FuncDef:1(
    f
    Args(
      Var(a))
    Block:1(
      Pass:2()))
  FuncDef:3(
    main
    Block:3(
      With:4(
        Expr(
          CallExpr:4(
            NameExpr(f [__main__.f])
            Args(
              IntExpr(0))))
        Target(
          NameExpr(a* [l]))
        Expr(
          CallExpr:4(
            NameExpr(f [__main__.f])
            Args(
              NameExpr(a [l]))))
        Target(
          NameExpr(b* [l]))
        Block:4(
          Assignment:5(
            NameExpr(x* [l])
            TupleExpr:5(
              NameExpr(a [l])
              NameExpr(b [l]))))))))
